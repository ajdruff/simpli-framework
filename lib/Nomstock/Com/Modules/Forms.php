<?php

/**
 * Core Module
 *
 * Plugin's core functionality
 * See http://simpliwp.com/plugin-builder/ for examples
 *
 * @author Andrew Druffner
 * @package SimpliFramework
 * @property boolean $NONCE_UNIQUE_ENABLED Whether to use unique nonces for each ajax action
 * @property string $NONCE_DEFAULT_ACTION The action name used for the menu if unique action nonces are not used
 * @property string $NONCE_FIELD_NAME The nonce field name used by the ajax script to add to the form
 * @property int $NONCE_DEFAULT_VALUE The nonce value generated by wp_create_nonce for the default action name of the menu
 * @property bool $ON_DEMAND_SCRIPTS True to load scripts only when the Simpli_Forms plugin needs them. False when the Simpli_Forms plugin is not being used to create the form. False will cause the form scripts to be loaded with every page load. 
 * @property array $ALLOWED_VALID_TYPES The allowed types of validation messages
 * @property string $VALIDATION_ERROR_MESSAGE The message you want shown as the form response when validation fails.
 * @property bool $VALIDATION_ERROR_MESSAGE_LIST Whether to show a list of error messages when validation fails. Overrides all other error message settings.
 * @property string $VALIDATION_FIELD_SUCCESS_MESSAGE The message to be shown to the user when the validation message succeeds. Can be overridden using validSetSuccessMessage.
 * @property string $VALIDATION_FIELD_ERROR_MESSAGE The message to be shown to the user when the field validation fails. 
 * @property boolean $BLOCK_FORM_SPAM Enables Spam blocking by adding some special fields to the spam, obfuscating javascript, and making checks on server side. Slows performance. 
 * @property boolean $SAVE_SSPAM Whether to save sspam (suspected spam) to the simpli_forms table.
 * @property boolean $BLOG_SPAM_NET_CHECK Whether to use BlogSpam.net api to check spam on form submissions.
 *  @property boolean $MULTIPLE_FIELD_ERRORS Default setting as to whether to show multiple validation errors for a each field.


 * 
 * 
 * 
 */
class Nomstock_Com_Modules_Forms extends Nomstock_Com_Base_v1c2_Plugin_Module {

    public function __toString(){

        return 'Forms Module, ' . get_class( $this );


    }

    /**
     * Configure Module
     *
     * @param none
     * @return void
     */
    public function config() {
        $this->debug()->t(); //trace provides a information about the method and arguments, and provides a backtrace in an expandable box. A visual trace is also provided if graphiviz is enabled.


        /*
         *  Nonces
         *
         */

        /*
         *  Nonce Default Action 
         * 
         * Action Name when unique nonces are not used
         */

        $this->setConfig(
                'NONCE_DEFAULT_ACTION'
                , $this->plugin()->getSlug() . '_save_settings' );

        /*
         *  Nonce Default Action's value
         *
         * Set when wp_create_nonce can be used.cant wp_create_nonce now, since function not available
         */
        $this->setConfig(
                'NONCE_DEFAULT_VALUE'
                , '' );

        /*
         * 
         * Nonce Field Name
         * 
         */
        $this->setConfig(
                'NONCE_FIELD_NAME'
                , $this->plugin()->getSlug() . '_nonce' );

        /*
         * 
         * NONCE_UNIQUE_ENABLED
         * Whether to use nonces that are unique for their form handler
         * slight performance hit, improved security
         */
        $this->setConfig(
                'NONCE_UNIQUE_ENABLED'
                , false );

        /*
         * 
         * Nonce Failed Message
         * 
         */
        $this->setConfig(
                'NONCE_FAILED_MESSAGE'
                , __( '<div style="color:red">Your session timed out, please refresh the page and try again.(nonce failure)</div>', $this->plugin()->getTextDomain() ) );



        $this->setConfig( 'ON_DEMAND_SCRIPTS', true );
        /*
         * ***********************************************************
         * 
         * Spam Controls
         * 
         * if on:
         * will load form-submit-min.js
         * will add spam checks 
         * 
         * ***********************************************************
         */

        $this->setConfig( 'BLOCK_FORM_SPAM', true );
        $this->setConfig( 'SAVE_SSPAM', true );
        $this->setConfig( 'BLOG_SPAM_NET_CHECK', false ); /* whether you want to use blogspam.net, an external spam checker. */

        /*
         * ***********************************************************
         * 
         * Form Validation Configuration
         * 
         * ***********************************************************
         */

        $this->setConfig( 'ALLOWED_VALID_TYPES', array( 'success', 'error' ) );

        /*
         * Default setting as to whether to show multiple validation errors for each field.
         */
        $this->setConfig( 'MULTIPLE_FIELD_ERRORS', true );


        /*
         * VALIDATION_ERROR_MESSAGE
         * The message you want shown as the form response when validation fails.
         */

        $this->setConfig(
                'VALIDATION_ERROR_MESSAGE'
                , 'There were some problems with your form - please review the highlighted items and try again.'
        );
        /*
         * VALIDATION_ERROR_MESSAGE_LIST
         * Whether to show a list of error messages when validation fails. Overrides all other error message settings.
         */

        $this->setConfig(
                'VALIDATION_ERROR_MESSAGE_LIST'
                , false
        );
        /*
         * VALIDATION_FIELD_SUCCESS_MESSAGE
         * The message to be shown to the user when the validation message succeeds. Can be overridden using validSetSuccessMessage.
         */

        $this->setConfig(
                'VALIDATION_FIELD_SUCCESS_MESSAGE'
                , '<i class="glyphicon glyphicon-ok"></i>&nbsp;&nbsp;Ok' //validation message on validation success 
        );

        /*
         * VALIDATION_FIELD_ERROR_MESSAGE
         * The message to be shown to the user when the field validation fails. 
         */

        $this->setConfig(
                'VALIDATION_FIELD_ERROR_MESSAGE'
                , '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Invalid Input'
        );


        /*
         * HANDLER_ERROR_MESSAGE
         * The message you want shown when form processing fails, after a successful validation
         */

        $this->setConfig(
                'HANDLER_ERROR_MESSAGE'
                , "We're sorry, but there was a problem processing your form. Please try again later or <a href=\"/support/\" >contact support</a>."
        );
        /*
         * HANDLER_ERROR_MESSAGE_LIST
         * Whether to show a list of error messages when form processing fails, after a successful validation. Overrides all other error message settings.
         */

        $this->setConfig(
                'HANDLER_ERROR_MESSAGE_LIST'
                , false
        );

        /*
         * HANDLER_SUCCESS_MESSAGE
         * The message to be shown to the user when the form handler succeeds.
         */

        $this->setConfig(
                'HANDLER_SUCCESS_MESSAGE'
                , 'Thank you, your submission was successful!'
        );



    }

    /**
     * Add Hooks
     *
     * Adds WordPress Hooks, triggered during module initialization
     * @param none
     * @return void
     */
    public function addHooks() {
        $this->debug()->t();






        /*
         * Add a hook for showing a form response message after a redirect.
         */

        add_action( $this->plugin()->QUERY_VAR . '_action' . '_form_response', array( $this, 'hookShowResponseMessageAfterRedirect' ) ); // ?$this->plugin()->QUERY_VAR . '_action'=form_response will execute this action


        /*
         * Add Form Handler Actions
         */
        $this->addFormActionAjax( 'contact_support' );
        $this->addFormActionAjax( 'request_escrow' );
        $this->addFormActionAjax( 'submit_domain' );
        $this->addFormAction( 'submit_domain' );
        $this->addFormActionAjax( 'contact_seller' );
        $this->addFormAction( 'contact_seller' );

        $this->addFormAction( 'update_form_status' );
        $this->addFormActionAjax( 'apply_filters' );
         $this->addFormActionAjax( 'beta_signup' );

        /*
         * below is an example of adding actions using the raw WordPress actions
         */
        //add_action('wp_ajax_' . $this->plugin()->getSlug() . '_contact_seller', array($this, 'hookFormActionAjaxContactSeller'));
//  add_action('wp_ajax_nopriv_' . $this->plugin()->getSlug() . '_contact_seller', array($this, 'hookFormActionAjaxContactSeller'));     




        $load_scripts_on_demand = true;

        /*
         * load scripts and styles for forms only if the 'on demand' setting is set to false.
         * Using On Demand requires the Simpli_Forms plugin, and optimizes script loading since
         * it only loads scripts if there is a form on the page.
         */
        if ( $this->ON_DEMAND_SCRIPTS === false ){

            add_action( 'wp_enqueue_scripts', array( $this, 'hookEnqueueScripts' ) );
            add_action( 'admin_enqueue_scripts', array( $this, 'hookEnqueueScripts' ) );
}
        /*
         *  add custom ajax handlers
         * this is where you map any form actions with the class method that handles the ajax request
         *
         * adding a wp_ajax hook in this format will execute the specified class method whenever the ajax request specifies an action = to $this->plugin()->getSlug() . '_xxxx'
          see http://codex.wordpress.org/Plugin_API/Action_Reference/wp_ajax_%28action%29
         *
         * Example:
         * add_action('wp_ajax_' . $this->plugin()->getSlug() . '_settings_save', array($this, 'save'));
         *
         */
    }

    /**
     * Adds javascript and stylesheets
     * WordPress Hook - hookEnqueueScripts
     *
     * @param none
     * @return void
     */
    public function hookEnqueueScripts() {
        $this->debug()->t();


        $handle = $this->plugin()->getSlug() . '_form-menu-events.js';

        $path = $this->plugin()->getDirectory() . '/admin/js/form-menu-events.js';
        $inline_deps = array();
        $external_deps = array( 'jquery' );
        $this->plugin()->enqueueInlineScript( $handle, $path, $inline_deps, $external_deps );
        $this->debug()->log( 'loaded script ' . $handle );


        $handle = $this->plugin()->getSlug() . '_form-menu-hooks.js';

        $path = $this->plugin()->getDirectory() . '/admin/js/form-menu-hooks.js';
        $inline_deps = array();
        $external_deps = array( 'jquery' );
        $this->plugin()->enqueueInlineScript( $handle, $path, $inline_deps, $external_deps );
        $this->debug()->log( 'loaded script ' . $handle );


        $handle = $this->plugin()->getSlug() . '_form-response.js';

        $path = $this->plugin()->getDirectory() . '/admin/js/form-response.js';
        $inline_deps = array();
        $external_deps = array( 'jquery' );
        $this->plugin()->enqueueInlineScript( $handle, $path, $inline_deps, $external_deps );
        $this->debug()->log( 'loaded script ' . $handle );




        $handle = $this->plugin()->getSlug() . '_form-submit.js';


        if ( $this->BLOCK_FORM_SPAM === true ) {



            $path = $this->plugin()->getDirectory() . '/admin/js/form-submit-min.js';
            $path = $this->plugin()->getDirectory() . '/admin/js/form-submit.js';
        } else{

            $path = $this->plugin()->getDirectory() . '/admin/js/form-submit.js';

        }
        $inline_deps = array();
        $external_deps = array( 'jquery' );
        $this->plugin()->enqueueInlineScript( $handle, $path, $inline_deps, $external_deps );
        $this->debug()->log( 'loaded script ' . $handle );

        /*
         * Add some additional variables we'll need
         */

        $vars[ 'forms' ][ 'referer_url_field_name' ] = '_simpli_forms_referer_url'; //note the underscore
        $vars[ 'forms' ][ 'ajaxurl' ] = admin_url( 'admin-ajax.php' ); //provide ajax url to forms using ajax on the front end. wordpress doesnt define it outside of admin




        /*
         * Localize the variables we added above
         */

        $this->debug()->logVar( '$vars = ', $vars );
        $this->plugin()->setLocalVars( $vars );




        /*
         * create the nonces
         */


        $this->_createNonces();

        }

    /**
     * Create Nonces
     *
     * Create the WordPress Nonces that will be needed for our forms.
     * Will create a default nonce, unique for the menu, that will be used
     * for any form action. If unique nonces are enabled, a nonce will
     * be created for each method that starts with hookFormAction.
     * All nonces will be made available to the javaqscript at
     * <namespace>.forms.nonce_values[$action_slug] where $action_slug is
     * a shortened version of the hookFormAction method that is called when
     * the ajax form is submitted.
     *
     * @param none
     * @return void
     */
    protected function _createNonces() {
        $this->debug()->logVar( 'is_admin() = ', is_admin() );
        /*
         * Block usage of this module's createNonces method by admin, since it will overwrite the values being written by metabox()->_createNonces, causing the Nonce check to fail. 
         */
//     if ( is_admin() ) {//check if admin to avoid nonces from being overwritten
//          return;
//}
#init
        $vars = array();



        /*
         * Create the default Nonce Value for Form Submission
         * This will be added to the ajax request when submitting the form.
         */
        $this->setConfig( 'NONCE_DEFAULT_VALUE', wp_create_nonce( $this->NONCE_DEFAULT_ACTION ) );
        $this->debug()->log( 'Created Default Nonce using NONCE_DEFAULT_ACTION = ' . $this->NONCE_DEFAULT_ACTION );

        /*
         * Generate Unique Nonces
         *
         * Generate Unique Nonces for each hookFormAction and each hookFormAction method contained in this class.             *
         * If the user wants to generate unique nonces,
         * then create them using reflection and then pass them to
         * javascript
         *
         */


        if ( $this->NONCE_UNIQUE_ENABLED ) {
            /*
             * use reflection to get all the public method names of the module's current class
             */
            $all_methods = $this->plugin()->tools()->getMethodsNames( get_class( $this ), ReflectionMethod::IS_PUBLIC );


            /*
             * now filter for those methods that
             * contain hookFormAction
             * indicating they are a valid ajax action
             */
            $ajax_action_methods = $this->plugin()->tools()->getStringsWithSubstring( array( 'hookFormAction' ), $all_methods );

            $non_ajax_methods = $this->plugin()->tools()->getStringsWithSubstring( array( 'hookFormAction' ), $all_methods );

            $action_methods = array_merge(
                    ($ajax_action_methods ), ($non_ajax_methods ) //cast to array to make sure merges work.
            );


            $this->debug()->logVar( '$actions = ', $action_methods );

            /*
             * Create a WordPress nonce action string for each method that starts with hookFormAction, which are the
             * action handlers for ajax actions.
             *
             * Loop through each of the hookFormAction methods found within this class,
             * and parse the names of the methods to turn them into nonce action names
             *
             *
             * $action The name of the action method , e.g.:hookFormActionSettingsSave
             *                *
             * $action_slug  e.g.:  'settings_save' . The 'action slug', which is the short name for the action (without the module slug prefix)
             *
             * $action_long  e.g.: nomstock_com_Menu010_general_settings_save The 'long name' of the action
             *
             *
             */
            foreach ( $action_methods as $action_method ) {
                $action_slug = $this->plugin()->tools()->getSlugFromWord( str_replace( array( 'hookFormActionAjax', 'hookFormAction' ), '', $action_method ) );


                $action = $this->plugin()->getSlug() . '_' . $this->getSlug() . '_' . $action_slug;



//   $vars[$action_short_name . '_nonce_value'] = wp_create_nonce($action_long);
                $vars[ 'forms' ][ 'nonce_values' ][ $action_slug ] = wp_create_nonce( $action );






                $this->debug()->log( ' Method <em>' . $action_method . '</em> automatically created Nonce value ' . $vars[ 'forms' ][ 'nonce_values' ][ $action_slug ] . ' using Nonce Action <strong>' . $action . '</strong>' );
            }
            $local_vars = $this->plugin()->getLocalVars();
            $this->debug()->logVar( '$local_vars = ', $local_vars );
            if ( is_array( $local_vars[ 'forms' ][ 'nonce_values' ] ) ) {
                $vars[ 'forms' ][ 'nonce_values' ] = array_merge( $local_vars[ 'forms' ][ 'nonce_values' ], $vars[ 'forms' ][ 'nonce_values' ] );
}

            $this->debug()->logVar( '$vars = ', $vars );






        }

        /*
         * tell javascript whether we are using unique nonces
         * A unique nonce is a nonce that is unique for each
         * ajax action. This is different from the default, where
         * we have a nonce that is
         * unique to the menu, not the action.
         */
        $vars[ 'forms' ][ 'unique_action_nonces' ] = $this->NONCE_UNIQUE_ENABLED;

        $vars[ 'forms' ][ 'nonce_field_name' ] = $this->NONCE_FIELD_NAME;
        $vars[ 'forms' ][ 'nonce_values' ][ 'default' ] = $this->NONCE_DEFAULT_VALUE;
        if ( $this->BLOCK_FORM_SPAM ) {
            $vars[ 'forms' ][ 'spam_controls' ] = true;
} else{

            $vars[ 'forms' ][ 'spam_controls' ] = false;
}
        $this->debug()->logVar( 'Added to javascript: $vars = ', $vars );

        $this->plugin()->setLocalVars( $vars );
    }

    /**
     * Verify WordPress Nonce
     *
     * Verifies the WordPress Nonce , using either a unique action name (derived from the $function_name parameter) or from the default $this->NONCE_DEFAULT_ACTION action.
     *
     * The simpli framework automatically handles WordPress Nonces for you for any settings saved by this module. The default configuration is to use a 'one nonce' for each menu, regardless of how many ajax actions are created. This is the easiest to implement, and the least performance heavy, and one that does not require any adherence to method naming conventions for it to work.
     * Alternately, If you wish to use a unique nonce for each action, this is also easily done but is a bit more performance heavy and requires additional understanding if you are to create your own ajax actions.
     * The basic steps are :
     * 1) be sure to stick to naming conventions , where the function for the action hook must be named 'hookFormAction<MyAction>'
     * 2) that $this->setConfig('NONCE_UNIQUE_ENABLED',true) in the config() method for your Menu module
     * 3) within your ajax script use nomstock_com.my_action_nonce_value
     * @param $function_name The name of the wp_ajax hook function. Must be in the form 'hookFormAction' , otherwise, the nonce will be rejected.
     * @return void
     */
    public function wpVerifyNonce( $function_name = null ) {

        /*
         * Get the nonce value that was submitted by checking
         * the $_REQUEST header ( which includes $_GET and $_POST vars)
         */
        $nonce_value = $this->plugin()->tools()->getRequestVar( $this->NONCE_FIELD_NAME );

        $this->debug()->logVar( '$nonce_value = ', $nonce_value );
        /*
         * Check whether unique nonces are enabled.
         *
         */
        if ( $this->NONCE_UNIQUE_ENABLED && !is_null( $function_name ) ) {

            $this->debug()->log( 'Using Unique Nonces' );

            /*
             * if unique nonces for each action are enabled, then get their action name from the function name
             */
            $nonce_action = $this->plugin()->getSlug() . '_' . $this->getSlug() . '_' . $this->plugin()->tools()->getSlugFromWord( str_replace( array( 'hookFormActionAjax', 'hookFormAction' ), '', $function_name ) );
            $this->debug()->logVar( '$nonce_action for unique action = ', $nonce_action );
        } else {
            /*
             * otherwise, just use the default action name
             */
            $nonce_action = $this->NONCE_DEFAULT_ACTION;
            $this->debug()->log( 'Not unique nonces, so using action = ' . $nonce_action . ' taken from module ' . $this->getName() );
        }

        /*
         * WordPress codex says to use check_ajax_referer instead of wp_verify_nonce for ajax requests
         * https://codex.wordpress.org/Function_Reference/check_ajax_referer
         */
        if ( $this->plugin()->tools()->isAjax() ) {




            $nonce_verification = check_ajax_referer( $nonce_action, $this->NONCE_FIELD_NAME, false ); //https://codex.wordpress.org/Function_Reference/check_ajax_referer


} else{

            $nonce_verification = wp_verify_nonce( $nonce_value, $nonce_action );
}

        $this->debug()->logVar( '$nonce_verification = ', $nonce_verification );

        if ( $nonce_verification === false ) {

            $this->debug()->logError( 'Failed Nonce for ' . $nonce_action );

            return false;
        } else {
            $this->debug()->log( 'Nonce PASSED for ' . $nonce_action );
            return true;
        }
    }

    /**
     * Show Response Message (Protected)
     *
     * Displays a message returned by an ajax request to a user
     *
     * @param string $template The path to the template to be used
     * @param string $message The html or text message to be displayed to the user
     * @param array $errors Any error messages to display
     * @param boolean $logout Whether to force a logout after the message is displayed
     * @param boolean $reload Whether to force a page reload after the message is displayed
     * @return void
     */
    protected function _showResponseMessage( $template_path, $message, $errors = null, $logout = false, $reload = false ) {
        $this->debug()->t();

        if ( $this->plugin()->tools()->isAjax() ) {
            if ( $logout ) {
                $this->debug()->log( 'Logout is set to true, logging out' );
                wp_logout();
            }
        }






        /*
         * Check for errors

          $errors[]='That was definitly the wrong answer';
         * $errors[]='Nope, try again';
          $errors[]='Can\'t you get anything right?';

         */

        if ( !is_null( $errors ) && !empty( $errors ) ) { //if there are error messages, display them

            /*
             * Build an Error Template and Process it
             */
            $error_html = '';
            foreach ( $errors as $error ) {
                $error_html.= '<li><p>' . $error . '</p></li>';
            }
            $error_html.= '</ul></div>';
            $tags[ 'ERROR_HTML' ] = $error_html;

            $template = '
    <div class="error below-h2 fade" id="message">

    <ul>
    {ERROR_HTML}
    </ul>
    </div>';
        } else { // but if there are no errors...
            $this->debug()->log( 'Show the message by including template ' . $template_path );

            /*
             * Build a Message Template and Process it
             */
            $tags[ 'MESSAGE' ] = $message;
            $tags[ 'RELOAD_SCRIPT' ] = ( $logout || $reload ) ? '<script type="text/javascript">var d = new Date();window.location = window.location.href+\'&\' + d.getTime();</script>' : '';

            ob_start();
            include ($template_path);
            $template = ob_get_clean();
        }


        /*
         * Clean Buffers
         * Get rid of all the output buffers and end output buffering
         * ao as to ensure nothing is output except what follows after the cleaning
         * Do not clean if we are using compression since compression makes use of the buffers,
         * so we would lose our content otherwise.
         * Do not clean if not using ajax or you will get not output.
         */
        if ( $this->plugin()->tools()->isAjax() ) {
            if ( !$this->plugin()->COMPRESS ) {
                while ( @ob_end_clean() );
            }
        }



        /*
         * Finally output the template
         */
        $message_html = $this->plugin()->tools()->crunchTpl( $tags, $template );
        $this->debug()->logVar( 'Showing template = ', $template );
        $this->debug()->logVar( 'Showing message = ', $message_html );

        if ( $this->plugin()->tools()->isAjax() ) {
            echo $message_html;

        } else {

            /*
             * Localize Success Message
             */
            $vars = array( 'forms' => array( 'response' => $message ) );
            $vars = array( 'forms' => array(
                    'submitted_form_id' => $this->plugin()->tools()->getRequestVar( 'simpli_forms_id' )
                    , 'response' => $message_html
                )
            );


            $this->plugin()->setLocalVars( $vars );



            $handle = $this->plugin()->getSlug() . '_form-response.js';

            $path = $this->plugin()->getDirectory() . '/admin/js/form-response.js';
            $inline_deps = array();
            $external_deps = array( 'jquery' );
            $this->plugin()->enqueueInlineScript( $handle, $path, $inline_deps, $external_deps );
            $this->debug()->log( 'loaded script ' . $handle );




            if ( !$this->plugin()->tools()->isAjax() ) {
                if ( $logout ) {

                    /*
                     * Before logging out, we have to redirect to the current url, but remove
                     * the action query paramater first. This is done because WordPress automatically
                     * redirects back to the previous url if the user decides to log back in. This
                     * would result in an endless loop if we didn't remove the _action param and the
                     * condition still existed.
                     *
                     * This is not done if this is an ajax request, since QUERY_VAR wouldnt apply in that case.
                     */
                    unset( $_GET[ $this->plugin()->QUERY_VAR . '_action' ] );
                    $redirect_url = $this->plugin()->tools()->rebuildUrl( $_GET, null, true );
                    $this->debug()->logVar( '$redirect_url = ', $redirect_url );

                    /*
                     * before logging out, redirect to a url without the action
                     * parameter. this will enable subsequent logins from
                     * avoiding an endless loop in case the referral url
                     * was causing the problem.
                     */
                    wp_redirect( $redirect_url );

                    wp_logout();
                    exit();
                }
            }
        }
        if ( $this->plugin()->tools()->isAjax() ) {
            exit(); //required to ensure ajax request exits cleanly; otherwise it hangs and browser request is garbled.
        }
    }

    /**
     * Add Form Action (Non-Ajax)
     *
     * Wrapper around add_action to help make the interface more user friendly and consistent with adding an ajax action.
      Instead of this :
     * add_action($this->plugin()->QUERY_VAR . '_action' . '_say_hello', array($this, 'hookFormActionSayHello'));
     *
     * you can do this:
     * $this->metabox()->addFormAction('say_hello');
     * or this :
     * $this->metabox()->addFormAction('say_hello', array($this, 'hookFormActionSayHello'));
     *
     * @param none
     * @return void
     */
    public function addFormAction( $action_slug, $callback = null ) {
        /*
         * will also assume $this, hookFormAction
         */
        $methodName = '';
        if ( is_null( $callback ) ) {
            $methodName = $this->plugin()->tools()->getWordFromSlug( $action_slug );
            $callback = array( $this, 'hookFormAction' . $methodName );
        }





        add_action( $this->plugin()->QUERY_VAR . '_action_' . $action_slug, $callback );
        $this->debug()->logVar( 'Added Action for = ', 'hookFormAction' . $methodName );
    }

    /**
     * Add Form Action (Ajax)
     *
     * Wrapper around add_action to help make the interface more user friendly and consistent with adding a non-ajax action.
     * It also takes care of adding the action for a front end request where the user is not logged in.
      Instead of this :
     * add_action('wp_ajax_' . $this->plugin()->getSlug() . '_say_hello', array($this, 'hookFormActionSayHello'));
     *
     * you can do this:
     * $this->metabox()->addFormActionAjax('say_hello');
     * or this :
     * $this->metabox()->addFormActionAjax('say_hello', array($this, 'hookFormActionSayHello'));

     *
     * @param none
     * @return void
     */
    public function addFormActionAjax( $action_slug, $callback = null ) {


        /*
         * will also assume $this, hookFormAction
         */
        $methodName = '';
        if ( is_null( $callback ) ) {
            $methodName = $this->plugin()->tools()->getWordFromSlug( $action_slug );
            $callback = array( $this, 'hookFormActionAjax' . $methodName );

        }



        $this->debug()->logVar( 'Added Action , Action = \'wp_ajax_' . $this->plugin()->getSlug() . '_' . $action_slug . ', callback = ', $callback );


        add_action( 'wp_ajax_' . $this->plugin()->getSlug() . '_' . $action_slug, $callback );
        add_action( 'wp_ajax_nopriv_' . $this->plugin()->getSlug() . '_' . $action_slug, $callback );










    }

    /**
     * Show Response Message (Wrapper around _showResponseMessage)
     *
     * Saves the Response Message Arguments to a transient for later
     * retrieval by hookShowResponseMessageAfterRedirect
     *
     * @param none
     * @return void
     */
    public function showResponseMessage( $template_path, $message, $errors = null, $logout = false, $reload = false ) {

        if ( $this->plugin()->tools()->isAjax() ) {
            /*
             * if its ajax, just call the internal method directly.
             *
             */
            $this->debug()->log( 'ajax call, so calling the internal method directly' );
            $this->_showResponseMessage( $template_path, $message, $errors, $logout, $reload );
            return;
        }

        /*
         * If its not ajax, we need to store the arguments first, since
         * we are going to redirect to a new page ( so a refresh wont cause
         * the form to submit again)
         */

        $form_id = $this->plugin()->tools()->getRequestVar( 'simpli_forms_id' );
        $form_response_args = (compact(
                        'template_path'
                        , 'message'
                        , 'errors'
                        , 'logout'
                        , 'reload'
                        , 'form_id'
        ));

        /*
         * save the arguments to a transient
         */
        set_transient( $this->plugin()->getSlug() . '_form_response_args', $form_response_args );

        /*
         * redirect to a url with 'form_response' in the url which fires
         * the 'hookShowResponseMessage' which shows the message there.
         */
        $redirect_url = $this->plugin()->tools()->rebuildUrl( array( $this->plugin()->QUERY_VAR . '_action' => 'form_response', 'simpli_forms_id' => $form_id ), $this->plugin()->tools()->getRequestVar( '_simpli_forms_referer_url' ) );
///wp-admin/edit.php?post_type=sf_snippet&page=nomstock_com_menu20_my_menu&nomstock_com_action=form_response&simpli_forms_id=simpli_forms_1
        //   $this->debug()->logVar('$redirect_url = ', $redirect_url);

        wp_redirect( $redirect_url );
        exit(); //redirect should always be followed by exit;
    }

    /**
     * Hook Show Response Message After A Redirect
     *
     * Shows Response Message after a Redirect, taking its arguments from
     * a transient
     *
     * @param none
     * @return void
     */
    public function hookShowResponseMessageAfterRedirect() {
        static $already_fired = false;

        /*
         * Prevent Multiple Firings of this method.
         *
         * Prevent this method from firing every time the metabox() class is invoked.
         * we only need it to fire once.
         */
        if ( !$already_fired ) {
            $already_fired = true;
        } else {
            $this->debug()->log( 'already took action, returning' );
            return;
        }
        /* why no pageCheck?
         *
         * We don't need to do a pageCheck since this action wont be fired
         * unless the proper query variable was added ( 'form_response')
         * Also, a pageCheck wouldn't work since the action fires before the
         * current_screen object is available.
         */

        $this->debug()->t();

        $form_response_args = get_transient( $this->plugin()->getSlug() . '_form_response_args' );
        if ( $form_response_args === false ) {

            /*
             * prevent us from showing the success message again on a page refresh
             */
            return;
        }
        /*
         * delete the transient holding the message arguments
         * We have no use for it once its retrieved once and need to make sure
         * any refreshes of the page will not show the message again or it will
         * make the user think the form was submitted again ( which it wouldn't be, since
         * we are redirecting to a landing page after the form submission, but there would
         * be a perception we were)
         *
         */
        delete_transient( $this->plugin()->getSlug() . '_form_response_args' );

        $this->debug()->logVar( '$form_response_args = ', $form_response_args );
        /*
         * show the message
         */
        $this->_showResponseMessage(
                $form_response_args[ 'template_path' ], $form_response_args[ 'message' ], $form_response_args[ 'errors' ], $form_response_args[ 'logout' ], $form_response_args[ 'reload' ]
        );
    }

    /**
     * Wrapper around Ajax method of the same name
     *
     * Long Description
     *
     * @param none
     * @return void
     */
    public function hookFormActionUpdateFormStatus() {
        $this->hookFormActionAjaxUpdateFormStatus();

    }

    /**
     * Hook Form Action Ajax Update Form Status
     *
     * Form Action for updating the form's status
     * Usage: button must set action='update_form_status'
     * 
     * This action will make an update query for each group of ids that are being updated for a given status.
     * for example, if there are 10 records, 2 are updated as 'archived', 4 are being updated as 'deleted' 
     * and 4 are being updated as 'saved', then this will make 3 update queries.
     * the exact status value is set by the dropdown.
     * 
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxUpdateFormStatus() {
        $this->debug()->logVar( '$_POST = ', $_POST );
        $records_pending_updates = $_POST[ 'status' ];

        if ( empty( $records_pending_updates ) ) {
            exit();
            return;
}
        $status_groups = array_unique( $records_pending_updates );



        foreach ( $status_groups as $status_group ) {

            /*
             * Build several arrays, grouping the ids together that will
             * receive the same status
             * e.g.: $ids['new'][]=1;
             */
            foreach ( $records_pending_updates as $id => $new_status ) {
                if ( $status_group === $new_status ) {//if the status matches the status 
                    $ids[ $status_group ][] = "'" . $id . "'";
}
            }
        }

        /*
         * Now make a database query for each group
         */

        global $wpdb;
        foreach ( $status_groups as $status_group ) {
            $query = "update simpli_forms
set status='" . $status_group . "'
where id IN (" . $str = implode( ", ", $ids[ $status_group ] ) . ")";
            $this->debug()->logVar( '$query = ', $query );
            $wpdb->query( $query );
}

        $this->debug()->logVar( '$_POST = ', $_POST );

        if ( $this->plugin()->tools()->isAjax() ){
            exit();
        }


}

    /**
     * hookFormActionAjaxContactSeller
     *
     * Long Description
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxContactSeller() {



        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    false // success message
                    , $this->plugin()->getModule( 'Forms' )->NONCE_FAILED_MESSAGE// failure message
            );
            exit();

                    }

        $this->blockSpam();

        //true to show multiple validation errors at once
        //false to only show the first error
        $this->validSetMultipleFieldErrors( false );

        /*
         * Add Validation Methods here
         */

        /*
         * Name
         */
        $this->setValidationRule(
                'name', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter your name.'//validation messge on validation failure 
        );



        /*
         * Domain Name
         */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter the domain name you are inquiring about'//validation messge on validation failure 
        );

        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'DomainName', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name is not valid. '//validation messge on validation failure 
        );


        /* Email */
        $this->setValidationRule(
                'email', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter your email address.'//validation messge on validation failure 
        );
        $this->setValidationRule(
                'email', //the name of the field that these rules will be applied to
                'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );


        /* Domain Name */




        $this->setValidationRule(
                'question', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a question'//validation messge on validation failure 
        );
        /*
         * set Success Validation Messages (optional)
         * You can set a custom 'success' message when a field validates, otherwise it will just say 'ok'
         */
        //   $this->validSetSuccessMessage( 'domain_name', '<i class="glyphicon glyphicon-ok"></i>&nbsp;&nbsp;Domain Name is looking good!' );



        /*
         * 
         * Finally, validate form
         * This will display any validation errors or allows execution to proceed to the next line if there are no errors.
         * 
         */

        $this->validateForm();


        $this->_SubmitForm();
        $this->sendFormResponse( true, 'Thanks for contacting me, I\'ll get back to you as soon as I can' );
        exit();


}

    /**
     * hookFormActionAjaxListDomain
     *
     * Hook that is called when the form to list a domain is submitted.
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxSubmitDomain_OLD() {




        $this->_SubmitForm( 'Great Job Dude, that was an awesome domain' );

        exit();
    }

    /**
     * Widget Is Selected
     *
     * Checks to see if at least one Widget Is Selected in the form submission
     * Used during widget processing to check to see if we need to add widgets to the domain record
     * @param $widget_name The name of the widget that you want to know is being added.  If no widget name is passed,
     * then selecting any widget will return true.   
     * @return void
     */
    public function widgetIsSelected( $name = null ) {
        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        $this->debug()->logVar( '$name = ', $name );
        /*
         * Take the widgets form array
         * and iterate through it looking for widgets with
         * 'enabled' set to 'yes'
         * if even one is set to 'yes' , return true
         */

        $widgets = $_POST[ 'widget' ];
        foreach ( $widgets as $widget_name => $widget_options ) {
            if ( $widget_options[ 'enabled' ] === 'yes' ) {
                if ( is_null( $name ) ) {

                    $this->debug()->logVar( '$widget_options = ', $widget_options );
                    return true;

                } else{
                    $this->debug()->logVar( '$widget_name = ', $widget_name );
                    if ( $name === $widget_name ) {
                        return true;
}

                }
}



}

        return false;

    }

    /**
     * addWidgets
     *
     * Adds Widgets to a Domain Name Listing Request - Assumes Widgets are already validated
     *
     * @param none
     * @return void
     */
    public function addWidgets() {
        $this->debug()->log( 'Stub  - Adding Widgets' );
        $widgetCode = $_POST[ 'widget_code' ];


    }

    /**
     * Insert Submitted Domain To Nstock Domains
     *
     * Inserts a domain added by a form submission into the nstock_domains table
     * This assumes its being called from a method that validates the data
     *
     * @param none
     * @return void
     */
    private function _insertSubmittedDomainToNstockDomains() {
        global $wpdb;
        $table = 'nstock_domains';

        $data = $this->_getNstockDomainsData();

        $new_record = array(
            'subdomain' => $data[ 'subdomain' ]
            , 'tld' => $data[ 'tld' ]
            , 'bin' => null //($_POST[ 'purchase_options' ][ 'bin' ] === 'yes') ? 'y' : 'n'
            , 'bid' => null //($_POST[ 'purchase_options' ][ 'bid' ] === 'yes') ? 'y' : 'n'
            , 'price' => null //$_POST[ 'price' ]
            , 'currency' => null //$_POST[ 'currency' ]
            , 'featured' => 'n' //($_POST[ 'featured' ] === 'yes') ? 'y' : 'n'
            , 'seller' => $data[ 'marketplace' ] //$this->getSellerIdFromSource( $_POST[ 'source' ] ) // the id of who is selling it. this could be sdeo;
            , 'approved' => 'n'
            , 'reg_available' => 'n' //($_POST[ 'source' ] === 'reg_search') ? 'y' : 'n'
            , 'source' => $data[ 'marketplace' ]  //$_POST[ 'source' ]
            , 'added_by' => get_current_user_id()
            , 'list_status' => 'pending' //pending list going active. List Goes active when cron job kicks in and activates all approved.
            , 'time_added' => current_time( 'mysql', 1 )
            , 'time_lastupdated' => null
            , 'time_approved' => null // not approved yet - this is simply a user  submitted domain
            , 'email' => $data[ 'email' ]
            , 'email_sent_list_start' => 'n'
            , 'email_sent_rejected' => 'n'
            , 'email_sent_list_end' => 'n'
        );


        /*
         * Note that passing functions via the wpdb class does not appear to work ( see discussion here: http://stackoverflow.com/questions/8566603/wordpress-wpdb-insert-mysql-now ) 
         * instead, you can use the mysql_query statement (see notes for example) or calculate the time prior to entering it in mysql . 
         * either : date('Y-m-d H:i:s')
         * or 
         * current_time('mysql',1)
         */


        $this->debug()->logVar( '$new_record = ', $new_record );


        $format = array(
            '%s'
            , '%s'
        );

        $insert_success_code = $wpdb->insert( $table, $new_record, $format );
        $this->debug()->logVar( '$insert_success_code = ', $insert_success_code );
        $last_record_id = $wpdb->insert_id;

        $this->debug()->logDatabaseError();




        if ( $insert_success_code === false ) {
            return false;
} else{
            return true;

}
    }

    /**
     * Short Description
     *
     * Long Description
     *
     * @param none
     * @return mixed False if failed validation, array if passed. Array is the form data to be inserted
     */
    private function _validateDomainSubmission_OLD_BEFORE_NEW_VALIDATION_FLOW() {

        $message = '';
        global $wpdb;

//        /*
//         * Check Nonces
//         */
        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {
            $this->setValidMessage(
                    'error', //$type
                    'form' //field Name
                    , "<strong>Nonce failed</strong>" //message 
            );

        }
        //owner : Seller: logged in user/Sedo/Afternic/blah
        //
        //added by : logged in user (auto)

        $allowed_tlds = array( 'com', 'net', 'org' );
        $allowed_marketplaces = array( 'afternic', 'sedo', 'godaddy' );



        /*
         * Get the domain_name from the form that was just submitted
         */
        $domain_parts = $this->plugin()->tools()->getRequestVar( 'domain_name' );


        $data[ 'email' ] = $this->plugin()->tools()->getRequestVar( 'email_address' );
        $data[ 'marketplace' ] = $this->plugin()->tools()->getRequestVar( 'marketplace' );

        if ( !in_array( $data[ 'marketplace' ], $allowed_marketplaces ) ) {
            $this->debug()->log( 'Marketplace is invalid, not adding domain' );


            $this->setValidMessage(
                    'error', //$type
                    'marketplace' //field Name
                    , "<strong>Please select a valid marketplace to obtain your domain's pricing information from</strong>" //message 
            );


  }

        if ( !$this->plugin()->getModule( 'Tools' )->validateEmailAddress( $data[ 'email' ] ) && trim( $data[ 'email' ] ) != '' && !is_null( $data[ 'email' ] ) ){

            $this->debug()->log( 'Email did not pass >getModule(Tools)->validateEmailAddress()' );


            $this->setValidMessage(
                    'error', //$type
                    'email' //field Name
                    , '<strong>Your Email Address is invalid.</strong> Providing us with an Email address is optional, but allows us to let you know when your name starts and stops appearing on our home page)  <a href="http://nomstock-dev.com/how/">Learn More Here</a> ' //message 
            );





    }


        /*
         * Separate the parts of the domain into subdomain and tld
         * Bail out if the tld is not in allowed tlds
         */
        if ( !is_null( $domain_parts ) && $domain_parts !== '' ) {
            $domain_parts = explode( '.', trim( $domain_parts ) );
            $this->debug()->logVar( '$domain_parts = ', $domain_parts );
            /*
             * Check if $domain parts is now an array with more than 1 piece
             */
            if ( is_array( $domain_parts ) && count( $domain_parts ) > 1 ) {
                $data[ 'subdomain' ] = $domain_parts[ 0 ];
                unset( $domain_parts[ 0 ] ); //remove the subdomain

                $data[ 'tld' ] = implode( '.', $domain_parts ); //consider everything else the tld
                if ( !in_array( $data[ 'tld' ], $allowed_tlds ) ) {
                    $this->debug()->log( $data[ 'tld' ] . ' is not one of the allowed tlds' );

}
        } else{ //if $domain_parts was not able to be parsed into 2 parts, bail
                $this->debug()->log( 'Domain Name does not appear to have a valid TLD extension' );

                $this->setValidMessage(
                        'error', //$type
                        'domain_name' //field Name
                        , "<p><strong>Your domain name is invalid.</strong> Please enter a properly formatted domain that is a .com, .net, or a .org</p>" //message 
                );


}

                } else{ //if $domain_parts was not able to be parsed into 2 parts, bail
            $this->debug()->log( 'No domain name submitted' );

            $this->setValidMessage(
                    'error', //$type
                    'domain_name' //field Name
                    , "<p><strong>Missing Domain Name (required)</strong> Please enter a properly formatted domain that is a .com, .net, or a .org</p>" //message 
            );
}


        if ( $this->isFieldValid( 'domain_name' ) ) {


            $this->setValidMessage(
                    'success', //$type
                    'domain_name' //field Name
                    , "<p><strong>Valid Domain Name</strong></p>" //message 
            );

}



        /*
         * if there were errors, return false, otherwise return the validated data
         */

        if ( !$this->isFormValid() ) {
            return false;
} else{
            return $data;

}

    }

    private $_invalidFields = null;

    /**
     * Get Invalid Fields
     *
     * Returns an array of fields that are invalid.
     * If there are no fields that are invalid, then it returns false.
     *
     * @param none
     * @return   
     */
    public function getInvalidFields() {


        return $this->_invalidFields;

    }

    /**
     * Is Form Valid
     *
     * Checks to see if there have been any invalid fields added to the invalid field tracker.
     *
     * @param none
     * @return boolean Returns True if there are no invalid fields
     */
    public function isFormValid() {

        if ( is_null( $this->getInvalidFields() ) ) {
            return true;
} else{
            return false;
}

    }

    /**
     * Is Field Valid
     *
     * Always returns valid unless some other method sets the field to invalid by using setFieldInvalid();
     * this is a *very* simple mechanism - simply adds an index to an array when a method finds it invalid.
     * once set, there is no method to unset it. So checking validity will depend on where in your program flow
     * that you check it . its important that you check it at the end of processing your validation routines and not sooner.
     *
     * @param string $field_name The name of the form field
     * @return boolean
     */
    public function isFieldValid() {
        if ( isset( $this->$_invalidFields[ $field_name ] ) ) {
            return false;
} else
    { return true;

    }

    }

    /**
     * Set Field Invalid
     *
     * Sets a Field Invalid
     *
     * @param string $field_name The name of the field to be set invalid
     * @return void
     */
    public function setFieldInvalid( $field_name ) {

        $this->_invalidFields[ $field_name ] = count( $this->_invalidFields );



    }

    private $_validMessages = array();
    private $_validFlagMultipleFieldErrors = null;

    /**
     * Validiation Method - Set Multiple Field Errors
     *
     * Set Multiple Field Errors for a specific form. 
     * Usage: Use this method within a form's handler to customize
     * error handling for a form. 
     * validSetMultipleFieldErrors() or (false) or (true)
     *
     * @param boolean $show_multiple True - show multiple errors 
     * @return void
     */
    public function validSetMultipleFieldErrors( $show_multiple = true ) {
        if ( !is_bool( $show_multiple ) ) {
            return;
}
        $this->_validFlagMultipleFieldErrors = $show_multiple;

        }

    /**
     * Validiation -  Get Multiple Field Errors Flag
     *
     * Whether to show more than one validation error within a validation tag.
     * Usage: Used only by the _setValidMessage method 
     * 
     * @param none
     * @return void
     */
    private function _validGetMultipleFieldErrorsFlag() {

        /*
         * if the multiple field errors internal flag is not
         * yet set, we know the form hasn't set it yet, 
         * so we use the global default setting
         */
        if ( !is_null( $this->_validFlagMultipleFieldErrors ) ) {
            return $this->_validFlagMultipleFieldErrors;
} else{

            return $this->MULTIPLE_FIELD_ERRORS;
}



    }

    /**
     * Set Validation Message
     *
     * Adds a validation message to $_validMessages. More than one validation message of error types can be added, but only one for success message.
     *
     * @param string $type The type of message your setting as defined by ALLOWED_VALID_TYPES
     * @param string $field_name The name attribute of the form field. For generic messages not tied to a field, use 'form'
     * @param string $message The user facing friendly validation message
     * 
     * usage: 
     * $this->_setValidMessage ('success','username','Good news, that username is available')
     * 
     * @return void
     */
    private function _setValidMessage( $type, $field_name, $message ) {
        $this->debug()->logVar( 'setting validation message for ' . $type . ' and ' . $field_name, $message );
        if ( !in_array( $type, $this->ALLOWED_VALID_TYPES ) ) {
            $this->debug()->log( 'Can\'t set validation message, wrong type, attempting to use $type = ' . $type );
            return;
}
        /*
         * Only allow one setting for 'success'. otherwise, you'll wind up with
         * multiple 'OK's within the validation tag, one for each time it passes
         * a validation rule.
         */
        if ( $type === 'success' ) {
            $this->debug()->log( 'Setting success message' );
            $this->_validMessages[ $field_name ] [ $type ][ 0 ] = $message;

            /*
             * Whether or not you show multiple validation errors for each field
             * is dependent on setting the MULTIPLE_FIELD_ERRORS configuration setting (global default)
             * or set the individual form setting using validSetMultipleFieldErrors()
             */

} else if ( $type === 'error' ){
            $this->debug()->log( 'Setting error message' );
            if ( $this->_validGetMultipleFieldErrorsFlag() === true ) {
                $this->debug()->log( 'Multiple errors allowed, adding to the error message array' );
                $this->_validMessages[ $field_name ] [ $type ][] = $message;
} else{
                /*
                 * check first whether an error is already set, if so, then skip it, since
                 * we always want to show the first error that occurs.
                 */
                if ( !isset( $this->_validMessages[ $field_name ] [ $type ][ 0 ] ) ) {
                    $this->debug()->log( 'Error is not yet set, so setting the first error now' );
                    $this->_validMessages[ $field_name ] [ $type ][ 0 ] = $message;

                    $this->debug()->logVar( '$this->_validMessages = ', $this->_validMessages );

} else {

                    $this->debug()->log( 'Error is is already set, so not setting an error message' );
}



}


}


    }

    /**
     * Get Formated Errors As String
     *
     * Formats Form Errors in a bulleted list for output
     *
     * @param none
     * @return void
     */
    public function getFormattedValidationErrors() {
        $field_errors = $this->getValidMessages( 'error' );
        $this->debug()->logVar( '$this->_validMessages = ', $this->_validMessages );
        $this->debug()->logVar( '$field_errors = ', $field_errors );
        foreach ( $field_errors as $field_name => $field_error ) {
            $this->debug()->logVar( '$field_error = ', $field_error );
            foreach ( $field_error as $error ) {
                $all_errors[] = $error;


}

}


        if ( count( $all_errors ) > 1 ) {

            $formatted_errors = implode( '<li>', $all_errors );
            $final_output = '<ul><li>' . $formatted_errors . '</ul>';

                } elseif ( count( $all_errors ) === 1 ){
            $final_output = $all_errors[ 0 ];

                } else{

            $final_output = '';
                }
        $this->debug()->logVar( '$final_output = ', $final_output );


        return $final_output;
}

    /**
     * Get Validiation Messages
     *
     * Returns all the validation messages
     *
     * usage:
     * $errors_array=$this->getValidMessages('error');
     * $validation_messages=$this->getValidMessages();
     * 
     * @param string $type The type of validation messages you want returned. $type must be one of the defined
     * types set on config() as ALLOWED_VALID_TYPES. If null, the method will return all messages
     * @return array
     */
    public function getValidMessages( $type = null ) {
        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        $this->debug()->logVar( '$this->_validMessages  = ', $this->_validMessages );


        $this->debug()->logVar( '$type = ', $type );
        $this->debug()->logVar( '$this->_validMessages = ', $this->_validMessages );

        if ( is_null( $type ) ) {
            return $this->_validMessages;

} else{
            /*
             * return an empty result if given a type that isn't allowed
             */
            if ( !in_array( $type, $this->ALLOWED_VALID_TYPES ) ) {
                $this->debug()->log( 'Returning an empty array because no allowed types were found' );
                return array();
}

            $this->debug()->log( 'Searching for error messages' );
            /*
             * extract the type of message desired from each result into the result array
             */
            $messages = array();
            foreach ( $this->_validMessages as $field_name => $field_messages ) {


                if ( isset( $field_messages[ $type ] ) ) {
                    foreach ( $field_messages[ $type ] as $message ) {
                        $messages[ $field_name ][] = $message;
}


}


}
            return $messages;
}


        }

    /**
     * Return Ajax Form Response
     *
     * Returns a Json object to a form's ajax request.
     * Includes a .message and a errors property
     *
     * @param boolean $successResult True if result was successful,False if there were errors
     * @param string $successMessage The success message to display to the user
     * @param string $errorMessage An error message that sums up all the errors. Can be simply all the validation messages grouped together. Or something like 'Please fix the errors and try again'. The validation messages can then be used to populate the validation tags
     * @param array $validationMessages An array of validation messages, with each element with an index the same as the name of the form field, and its value an array of valid and error messages
     * for the entire form is contained in the 'form' element
     * @return void
     */
    public function returnAjaxFormResponse( $successResult, $successMessage, $errorMessage, $validationMessages ) {

        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        $this->debug()->logVar( '$validationMessages = ', $validationMessages );

        $response = array(
            'successResult' => $successResult,
            'successMessage' => $successMessage,
            'errorMessage' => $errorMessage,
            'validationMessages' => &$validationMessages //be sure to use the reference &$validationMessages here due to what appears to a bug in php that will give you a recursive error. http://bytes.com/topic/php/answers/12573-possible-bug-recursive-array-references
        );

        $this->debug()->logVar( '$response = ', $response );

        echo json_encode( $response );
        exit();
    }
    /**
     * Hook - Form Action - Submit Domain
     *
     * Domain Form Submissiont to request that a domain be listed on the ticker
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxSubmitDomain() {

        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    null // success message
                    , '<strong>Nonce failed</strong>' // failure message
            );

        }


        $this->blockSpam();

        $this->validSetMultipleFieldErrors( false );

        $this->setValidationRule(
                'email', //the name of the field that these rules will be applied to
                'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please add a domain name'//validation messge on validation failure 
        );


        /*
         * Check Domain Name for Min Length
         */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'MinLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(
            'min_length' => 4 + 4 //2+4 minimum length of domain name,including extension and dot character. if you want to add variable length extensions later, you'll need to add a callback function as a paramater to determine the max size of the extension
                ), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name must be at least 4  characters long,excluding extension,' ); //validation messge on validation failure 
        /*
         * Check Domain Name for Max Length
         */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'MaxLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(
            'max_length' => 16 + 4 //16+4 maximum length of domain name,including extension and dot character. if you want to add variable length extensions later, you'll need to add a callback function as a paramater to determine the max size of the extension
                ), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name must not be longer than 16 characters long,excluding extension,' ); //validation messge on validation failure 


        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'DomainName', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name is not valid. '//validation messge on validation failure 
        );

        /*
         * Check that TLD is something we handle
         */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'TLD', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(
            'allowed_tlds' => array( '.com', '.net', '.org' ) //allowed TLDs
                ), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name must be one of the following: ' . ltrim( implode( ',', array( '.com', '.net', '.org' ) ) ), ',' ); //validation messge on validation failure 


        /*
         * Check emailk
         */
        if ( ($_POST[ 'newsletter_optin' ][ 'signmeup' ] === 'yes') || (trim( $_POST[ 'email' ] ) !== '') ){


            $this->setValidationRule(
                    'email', //the name of the field that these rules will be applied to
                    'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                    array(), // paramaters, not including the field value since that will be taken from the Request var
                    '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid email address. '//validation messge on validation failure 
            );

         }

        /*
         * Check valid marketplace
         */
        $this->setValidationRule(
                'marketplace', //the name of the field that these rules will be applied to
                'List', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(
            'list' => array( 'sedo', 'godaddy', 'afternic' ) //the list of acceptable marketplaces
                ), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please select a secondary marketplace where your domain is currently listed.' ); //validation messge on validation failure       

        if ( $widgetsEnabled ) {
            /*
             * check widget code is a valid purchased code
             */
            if ( $this->widgetIsSelected() ) {

                $this->setValidationRule(
                        'widget_code', //the name of the field that these rules will be applied to
                        array( $this, 'validateWidgetCode' ), //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array(), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;The WidgetCode is not valid' //validation messge on validation failure  
                );


         }


            if ( $this->widgetIsSelected( 'blurbit' ) ) {
                $this->setValidationRule(
                        "widget[blurbit][description]", //the name of the field that these rules will be applied to
                        'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'field_name' => 'widget[blurbit][description]' ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please add a description or uncheck the Blurbit Widget' //validation messge on validation failure  
                );


           }

            if ( $this->widgetIsSelected( 'linkit' ) ) {
                $this->setValidationRule(
                        'widget[linkit][title]', //the name of the field that these rules will be applied to
                        'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'field_name' => 'widget[linkit][title]' ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please add a title for your link or uncheck the Link It Widget' //validation messge on validation failure  
                );

                $this->setValidationRule(
                        'widget[linkit][title]', //the name of the field that these rules will be applied to
                        'MinLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'min_length' => '5' ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Your title must be more than just a few characters' //validation messge on validation failure  
                );

                $this->setValidationRule(
                        'widget[linkit][title]', //the name of the field that these rules will be applied to
                        'MaxLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'max_length' => '100' ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Uh...maybe you could shorten the title just a little?' //validation messge on validation failure  
                );

                $this->setValidationRule(
                        'widget[linkit][url]', //the name of the field that these rules will be applied to
                        'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'field_name' => 'widget[linkit][url]' ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please add a url for your link or uncheck the Link It Widget' //validation messge on validation failure  
                );
                $this->setValidationRule(
                        'widget[linkit][url]', //the name of the field that these rules will be applied to
                        'MinLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'min_length' => 7 ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Your url is too short and doesn\'t look valid.' //validation messge on validation failure  
                );

                $this->setValidationRule(
                        'widget[linkit][url]', //the name of the field that these rules will be applied to
                        'MaxLength', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array( 'max_length' => 255 ), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Your url is too long! Please use a url shortener if you must.' //validation messge on validation failure  
                );

                $this->setValidationRule(
                        'widget[linkit][url]', //the name of the field that these rules will be applied to
                        'ExternalUrl', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                        array(), // paramaters, not including the field value since that will be taken from the Request var
                        '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Your link isnt going to work - its not a valid URL' //validation messge on validation failure  
                );


        } //end if widgets enabled
           }



        /*
         * check widget code expiration date
         */




        /*
         * set Success Validation Messages
         */
        $this->validSetSuccessMessage( 'domain_name', '<i class="glyphicon glyphicon-ok"></i>&nbsp;&nbsp;Domain Name is looking good!' );


        $this->debug()->logVar( '$this->_validation_rules = ', $this->_validation_rules );

        /*
         * 
         * Finally, validate form
         * 
         */

        $this->validateForm(); //this will check if there are any validation errors and sends back a response if there are and exit. if everything is ok, it proceeds to the next line.
        //now do whatever you need to do to proceed.
        // use setFormHandlerError() if there are any errors, but do not send back a response yet.         

        if ( $widgetsEnabled ) {



            /*
             * check if the user selected a widget to be added
             * if they did, check to see if the widget code is valid
             */

            if ( $this->widgetIsSelected() ) {

                //check valid widget
                if ( !$this->widgetCodeIsValid() ) {

                    $this->setValidMessage(
                            'error', //$type
                            'form' //$field_name
                            , '<p><strong>Uh oh! You are trying to add a Widget(s) but without a valid Widget code!</strong> Please add a valid Widget Code (you can <a target="_blank" href="/buy/widget/">buy one here</a>) so we can add your Widget(s) or uncheck the Widgets and try again to submit your domain name.</p>' //$message 
                    );


} else{

                    $this->addWidgets();
}
}

}


        /*
         * Insert Domain Into Database 
         */

        //  $insert_success_code = $this->_insertSubmittedDomainToNstockDomains( $validated_data );


        $data = $this->_getNstockDomainsData();
        $this->debug()->logVar( '$data = ', $data );
        $this->_insertSubmittedDomainToNstockDomains();


        /*
         * 
         */

        $this->debug()->logVar( '$_POST = ', $_POST );

        if ( $_POST[ 'newsletter_optin' ][ 'signmeup' ] === 'yes' ){

            $this->_SubmitFormV2();
        }


        $this->sendFormResponse( true, 'Thank you for submitting a domain! Once we approve it we\'ll add it to the Nomstock Ticker for 24 hours for free, after which you can add it again'

                // success message.
        ); //now send back the response. will show a message if there was a non-validation failure ( database error on insertion for example), otherwise will respond with success.






        if ( $insert_success_code === false ) {



            $this->setValidMessage(
                    'error', //$type
                    'form' //field Name
                    , "<p><strong>Failed to add your domain name to the Ticker</strong> Please try again</p>" //message 
            );


            $this->returnAjaxFormResponse(
                    false //$successResult
                    , null //$successMessage
                    , $this->getFormattedValidationErrors() //$errorMessage
                    , $this->getValidMessages()  //$validationMessages
            );


} else{



            $this->returnAjaxFormResponse(
                    true //$successResult
                    , '<span>Domain Name Added Successfully</span>' //$successMessage
                    , null //$errorMessage
                    , $this->getValidMessages()  //$validationMessages
            );

}



        exit(); //On a  post or ajax request, you need to cleanly exit() or will you get a trailing '0'when you echo something out.
//        $this->metabox()->showResponseMessage(
//                $this->plugin()->getDirectory() . '/admin/templates/ajax_message_admin_panel.php', //string $template The path to the template to be used
//                $message, // string $message The html or text message to be displayed to the user
//                array(), //$errors Any error messages to display
//                false, //boolean $logout Whether to force a logout after the message is displayed
//                false //boolean $reload Whether to force a page reload after the message is displayed
//        );
        // echo 'you submitted your form successfully';
        // exit(); //required
            }

    /**
     * Hook - Form Action - Beta Signup
     *
     * Domain Form Submissiont to request that a domain be listed on the ticker
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxBetaSignup() {

        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    null // success message
                    , '<strong>Nonce failed</strong>' // failure message
            );

        }
     
   
        $this->blockSpam();

        $this->validSetMultipleFieldErrors( false );

        $this->setValidationRule(
                'email', //the name of the field that these rules will be applied to
                'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );
       

            $this->setValidationRule(
                'email', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );



        $this->debug()->logVar( '$this->_validation_rules = ', $this->_validation_rules );

        /*
         * 
         * Finally, validate form
         * 
         */

        $this->validateForm(); //this will check if there are any validation errors and sends back a response if there are and exit. if everything is ok, it proceeds to the next line.
        //now do whatever you need to do to proceed.
        // use setFormHandlerError() if there are any errors, but do not send back a response yet.         


        /*
         * Insert User into Database 
         */


        $this->_SubmitFormV2();




        $this->sendFormResponse( true, 'Thank you for requesting a Beta invitation! We\'ll keep you updated leading up to the Beta launch'

                // success message.
        ); //now send back the response. will show a message if there was a non-validation failure ( database error on insertion for example), otherwise will respond with success.






        exit(); //On a  post or ajax request, you need to cleanly exit() or will you get a trailing '0'when you echo something out.

            }

    /**
     * SubmitFormV2 (internal)
     *
     * Generic Form Submission. Each submission results in an entry in the simpli_forms table, recording time and status, as well as
     * adding all its data into the simpli_forms_data table (instead of serializing the data) which allows easier data manipulation
     * and export than with serialization. Older archived function uses serialization.
     *
     * @param enum $status 'new','delete','saved',sspam, or spam . sspam=suspected spam.
     * @return void
     */
    private function _SubmitFormV2( $status = 'new' ) {

        /*
         * Scrub the input so that it is an approved value, and if not, force it to be the default 'new'
         */
        if ( !in_array( $status, array( 'new', 'delete', 'saved', 'sspam', 'spam' ) ) ) {
            $status = 'new';
}



        global $wpdb;
        $table = 'simpli_forms_v2';



        $data = array(
            'form_name' => $_POST[ 'form_name' ],
            'status' => $status, //sspam (suspected spam), new, delete,saved
            'time_added' => current_time( 'mysql', 1 ),
        );
        $format = array(
            '%s',
            '%s',
            NULL
        );
        $this->debug()->logVar( '$_POST = ', $_POST );
        $this->debug()->logVar( '$data = ', $data );


         $wpdb->insert( $table, $data, $format );
        
        $simpli_forms_insert_id=$wpdb->insert_id;
        $this->debug()->logVar( '$table_insert_id = ', $table_insert_id );

        if ( $simpli_forms_insert_id === false ) {
            $this->setFormHandlerError( 'Sorry, there was an error while attempting to add your form to our database' );

            $this->debug()->logError( 'Database insertion failed' );
            $this->debug()->logDatabaseError();

        } else{

            $table = 'simpli_forms_v2_data';

            /*
             * Now construct a 'Insert Into' query that 
             * iterates  through $_POST and extracts field_names and field_values
             * For those values that are arrays, construct their name from the post name + the index and the field_value
             * from the array element's value
             * 
             * By constructing an insert into statement, we ensure only one database query takes place
             * instead of inserting only 1 row for each name value pair
             * ref:http://stackoverflow.com/a/15013351/3306354 
             */

            $sql = "INSERT INTO $table (form_id, field_name, field_value) values ";

            $valuesArr = array();
            foreach ( $_POST as $post_field_name => $post_field_value ){



                if ( is_array( $post_field_value ) ) {

                    foreach ( $post_field_value as $index_name => $index_value ) {
                         $field_name = mysql_real_escape_string( $post_field_name . "[$index_name]" );
                        $field_value = mysql_real_escape_string( $index_value );
                        $rowValues[] = "('$simpli_forms_insert_id', '$field_name', '$field_value')";
}


} else {


                    // $field_name = mysql_real_escape_string( $post_field_name );
                    // $field_value = mysql_real_escape_string( $post_field_value );
                    $field_name = mysql_real_escape_string( $post_field_name );
                    $field_value = mysql_real_escape_string( $post_field_value );
                    $rowValues[] = "('$simpli_forms_insert_id', '$field_name', '$field_value')";
    }
            }
            $sql .= implode( ',', $rowValues );

            $wpdb->show_errors();
            $wpdb->query( $sql );


        }





}

    /**
     * SubmitForm (internal)
     *
     * Generic Form Submission, adds to the simpli_forms table
     *
     * @param enum $status 'new','delete','saved',sspam, or spam . sspam=suspected spam.
     * @return void
     */
    private function _SubmitForm( $status = 'new' ) {

        /*
         * Scrub the input so that it is an approved value, and if not, force it to be the default 'new'
         */
        if ( !in_array( $status, array( 'new', 'delete', 'saved', 'sspam', 'spam' ) ) ) {
            $status = 'new';
}

        /*
         * add check on nonces
         */

        global $wpdb;
        $table = 'simpli_forms';



        $data = array(
            'form_name' => $_POST[ 'form_name' ],
            'fields' => maybe_serialize( $_POST ),
            'status' => $status, //sspam (suspected spam), new, delete,saved
            'time_added' => current_time( 'mysql', 1 ),
        );
        $format = array(
            '%s',
            '%s',
            '%s',
            NULL
        );
        $this->debug()->logVar( '$_POST = ', $_POST );
        $this->debug()->logVar( '$data = ', $data );


        $table_insert_id = $wpdb->insert( $table, $data, $format );
        $this->debug()->logVar( '$table_insert_id = ', $table_insert_id );

        if ( $table_insert_id === false ) {
            $this->setFormHandlerError( 'Sorry, there was an error while attempting to add your form to our database' );

            $this->debug()->logError( 'Database insertion failed' );
            $this->debug()->logDatabaseError();

        }





}

    /**
     * Short Description
     *
     * Long Description
     *
     * @param none
     * @return void
     */
    public function addContact( $fields ) {
        global $wpdb;

}

    /**
     * Hook - Form Action Ajax Apply Filters
     *
     * Apply form filters to the Manage Forms Metabox 
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxApplyFilters() {

        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    false // success message
                    , $this->plugin()->getModule( 'Forms' )->NONCE_FAILED_MESSAGE// failure message
            );
            exit();

                    }



        $this->debug()->logVar( '$_POST = ', $_POST );

        $filters[ 'status' ] = ($_POST[ 'status' ] !== 'any') ? $_POST[ 'status' ] : null;
        $filters[ 'form_name' ] = ($_POST[ 'selected_form' ] !== 'any') ? $_POST[ 'selected_form' ] : null;
        $hide_hidden = $this->plugin()->tools()->getRequestVar( 'hide_hidden_fields' );

        /*
         * remove any filters that have null for values
         * This will remove the filter from the array
         * This also means you can't filter for a null value.
         */
        $filters = array_filter( $filters );
        $this->debug()->logVar( '$filters = ', $filters );
        $this->debug()->logVar( '$hide_hidden = ', $hide_hidden );


        echo $this->plugin()->getModule( 'Menu22SimpliForms' )->getFormsHtmlTable(
                $filters, //$filters
                array( 'action', 'form_name' ), //$hidden_fields
                $hide_hidden //$hide_hidden
        );


        exit();


    }

    /**
     * hookFormActionAjaxContactSupport
     *
     * Form Action for contacting support
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxContactSupport() {


        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    false // success message
                    , $this->plugin()->getModule( 'Forms' )->NONCE_FAILED_MESSAGE// failure message
            );
            exit();

                    }

        $this->blockSpam();

        //true to show multiple validation errors at once
        //false to only show the first error
        $this->validSetMultipleFieldErrors( false );

        /*
         * Add Validation Methods here
          /*

          /*
         * Domain Name
         */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'DomainName', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Domain Name is not valid. '//validation messge on validation failure 
        );


        /* Email */

        $this->setValidationRule(
                'email_address', //the name of the field that these rules will be applied to
                'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );


        /* Domain Name */



        /* Domain Name */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'DomainName', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid domain name'//validation messge on validation failure 
        );


        $this->setValidationRule(
                'email_address', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid email address'//validation messge on validation failure 
        );


        $this->setValidationRule(
                'issue_details', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please describe your issue'//validation messge on validation failure 
        );
        /*
         * set Success Validation Messages (optional)
         * You can set a custom 'success' message when a field validates, otherwise it will just say 'ok'
         */
        //   $this->validSetSuccessMessage( 'domain_name', '<i class="glyphicon glyphicon-ok"></i>&nbsp;&nbsp;Domain Name is looking good!' );



        /*
         * 
         * Finally, validate form
         * This will display any validation errors or allows execution to proceed to the next line if there are no errors.
         * 
         */

        $this->validateForm();


        $this->_SubmitForm();
        $this->sendFormResponse( true, 'Thanks for contacting support! Please look for a response in your email inbox within the next 24 hours' );
        exit();

}

    /**
     * hookFormActionAjaxEscrowRequest
     *
     * Form Action for submitting an Escrow Request
     *
     * @param none
     * @return void
     */
    public function hookFormActionAjaxRequestEscrow() {


        if ( !$this->wpVerifyNonce( __FUNCTION__ ) ) {


            $this->sendFormResponse(
                    false // success message
                    , $this->plugin()->getModule( 'Forms' )->NONCE_FAILED_MESSAGE// failure message
            );
            exit();

                    }

        $this->blockSpam();


        /* Domain Name */
        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'DomainName', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid domain name'//validation messge on validation failure 
        );


        $this->setValidationRule(
                'domain_name', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid domain names'//validation messge on validation failure 
        );

        /*
         * 
         * Price
         * 
         */

        $this->setValidationRule(
                'price', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter the purchase price'//validation messge on validation failure 
        );

        /* Email */

        $this->setValidationRule(
                'email_address', //the name of the field that these rules will be applied to
                'Email', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove">&nbsp;&nbsp;Please enter a valid email address.'//validation messge on validation failure 
        );

        $this->setValidationRule(
                'email_address', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please enter a valid email address'//validation messge on validation failure 
        );


        /*
         * Phone
         */

//none  - phone is optional

        /*
         * 
         * Terms
         */

        $this->setValidationRule(
                'escrow_terms', //the name of the field that these rules will be applied to
                'Required', //rule name or callable method. rule name should correspond to a method in this module in the form validate<Rulename>
                array(), // paramaters, not including the field value since that will be taken from the Request var
                '<i class="glyphicon glyphicon-remove"></i>&nbsp;&nbsp;Please accept the terms'//validation messge on validation failure 
        );


        /*
         * 
         * Finally, validate form
         * This will display any validation errors or allows execution to proceed to the next line if there are no errors.
         * 
         */

        $this->validateForm();


        $this->_SubmitForm();


        $domain_name = $this->plugin()->tools()->getRequestVar( 'domain_name' );
        $email = $this->plugin()->tools()->getRequestVar( 'email_address' );
        $this->sendFormResponse( true, 'Thank you! The Nomstock Support team will begin processing your escrow request  to purchase <strong>' . $domain_name . '</strong>.  Moniker will be sending their escrow documentation and instructions to your inbox at <strong>' . $email . '</strong> . <strong>If you don\'t receive anything from Moniker within 1 business day of submitting this request, please contact <a href="/support/">Nomstock support</a>. </strong>' );
        exit();



}

    /**
     * Validate Required
     *
     * Validates Whether a field contains a value
     *
     * @param string $field_value
     * @return void
     */
    public function validateRequired( $field_value, $parms = array() ) {
        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        $this->debug()->logVar( '$parms = ', $parms );
        $this->debug()->logVar( '$field_value = ', $field_value );


        /*
         * Return False if Empty

         */

        if ( $this->tools()->isEmptyString( $field_value ) ) {

            $result = false;
} elseif ( is_array( $field_value ) ){ //checkf or checkbox

            /*
             * checkbox
             */


            if ( $field_value[ 'yes' ] === 'yes' ) {
                $result = true;
} else{

                $result = false;

}

} else {

            /*
             * Textboxes, TextArea
             */

            $result = true;

}

        $this->debug()->logVar( '$result = ', $result );
        return $result;

    }

    /**
     * Process Validation Rules
     *
     * Executes the validation methods that have been mapped to the fields using setValidationRules()
     * @param none
     * @return void
     */
    private function _processValidationRules() {
        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        $all_rules = $this->getValidationRules();


        foreach ( $all_rules as $field_name => $rule_set ) {

            $this->debug()->logVar( '$field_name = ', $field_name );

            //   assert('$field_name = "escrow_terms[no]"');
            //        assert(sprintf('%s!=="escrow_terms[no]"',$field_name)); //$field_name = escrow_terms[no] 
            //   assert('1===2'); //     assert(sprintf('%s!=="text"',$scid));
            foreach ( $rule_set as $rule ) {

                $params = array();
                $method = null;
                $success_message = null;
                $$error_message = null;

                $debug_rule = $rule;



                if ( is_object( $debug_rule[ 'callback' ][ 0 ] ) ) {


                    $debug_rule[ 'callback' ] = ( string ) $debug_rule[ 'callback' ][ 0 ] . '->' . ( string ) $debug_rule[ 'callback' ][ 1 ] . '()';

                                }

                $this->debug()->logVar( '$debug_rule = ', $debug_rule );

                $field_value = $this->plugin()->tools()->getRequestVar( $field_name );
                $this->debug()->logVar( '$field_value = ', $field_value );


                $method = $rule[ 'callback' ];
                $success_message = $rule[ 'success_message' ];
                $error_message = $rule[ 'error_message' ];

                /*
                 * if no paramaters were passed,
                 * than create a paramaters array with the field value.
                 * if paramaters were passed, then add the field value to the 
                 * paramaters array so the original paramaters value becomes the second value.
                 */
                $this->debug()->logVar( '$params = ', $params );
                if ( empty( $rule[ 'params' ] ) ) {
                    $params = array( $field_value );
} else{
                    $params = array( $field_value, $rule[ 'params' ] );
}

                $this->debug()->logVar( '$params = ', $params );


                if ( is_callable( $method ) ) {
                    $this->debug()->log( '$method is callable, calling method ' . $method[ 1 ] . '()' );
                    $validationResult = call_user_func_array( $method, $params );
} else{
                    /*
                     * if not callable, it means that we are going to assume that the 
                     * method resides in this class and will attempt to call it
                     */
                    $method = 'validate' . $method;
                    if ( method_exists( $this, $method ) ) {

                        $this->debug()->log( 'Calling method ' . $method . '()' );
                        $this->debug()->logVar( '$params = ', $params );
                        $validationResult = call_user_func_array( array( $this, $method ), $params );



}


}

                $this->debug()->logVar( '$validationResult = ', $validationResult );
                /*
                 * set validation error message and set invalid rule
                 */
                if ( $validationResult === false ){
                    $this->debug()->logVar( '$field_name = ', $field_name );
                    $this->setFieldInvalid( $field_name );

                    $this->debug()->logVar( '$this->getValidMessages() = ', $this->getValidMessages() );
                    $this->debug()->logVar( '$this->getInvalidFields() = ', $this->getInvalidFields() );

                    if ( is_null( $error_message ) ) {
                        $error_message = $this->VALIDATION_FIELD_ERROR_MESSAGE;
}

                    $this->_setValidMessage( 'error', $field_name, $error_message );





}
} //end foreach loop to search for rule sets

}//end foreach to search for fields

    }

    /**
     * Validate Form
     *
     * Validates a Form. Calls Exit if validation fails and responds back with errors 
     *
     * @param string $error_message The summary error message to be displayed to the user in place of the successful form response. Configure the default using VALIDATION_ERROR_MESSAGE
     * @return void
     */
    public function validateForm( $error_message = null ) {

        $this->_processValidationRules(); //this actually calls the methods for each rule and executes them

        /*
         * use the default error message if none is supplied
         */
        $error_message = (is_null( $error_message ) === true) ? $this->VALIDATION_ERROR_MESSAGE : $error_message;

        if ( $this->VALIDATION_ERROR_MESSAGE_LIST === true ) {
            $error_message = $this->getFormattedValidationErrors();
}

        if ( !$this->isFormValid() ) {
            $this->returnAjaxFormResponse(
                    false //$successResult
                    , null //$successMessage
                    , $error_message //$errorMessage
                    , $this->getValidMessages()  //$validationMessages
            );

} else{
            return true;
}

    }

    /**
     * Is Handler Successful
     *
     * Returns True or False if form handler runs into any errors during 
     * form processing
     *
     * @param none
     * @return boolean True if no errors, False if errors
     */
    public function isHandlerSuccessful() {

        if ( !is_null( $this->_handlerErrors ) ) {
            return false;
} else{
            return true;
}
    }

    /**
     * Get Handler Errors
     *
     * Returns the current array of errors encountered during form processing ( after validation has successfully completed)
     *
     * @param none
     * @return array The array of errors
     */
    public function getHandlerErrors() {
        if ( is_null( $this->_handlerErrors ) ) {
            return array();
} else{
            return $this->_handlerErrors;
}

    }

    private $_handlerErrors = null;

    /**
     * Set Form Handler Error
     *
     * Adds an Error to the handlerError array. Used to track
     * errors that occur after validation during the processing of data.
     *
     * @param string $error_message The error message in html to be displayed to the user.
     * @return void
     */
    public function setFormHandlerError( $error_message ) {
        $this->_handlerErrors[] = $error_messaage;

    }

    /**
     * Send Form Response
     *
     * Sends a Message Back to the User After Form is Processed. 
     * You can call this with or without paramaters. Without paramaters,
     * it uses the default messages contained in config();
     * If $this->HANDLER_ERROR_MESSAGE_LIST is true, it overrides all and lists errors as a bulleted list
     * @param string $success_message The message shown to the user with a successful form submission
     * @param string $error_message The message shown to the user for an unsuccessful submission
     * 
     * @return void
     */
    public function sendFormResponse( $successResult = true, $custom_message = null ) {
        $error_message = $this->HANDLER_ERROR_MESSAGE;
        $success_message = $this->HANDLER_SUCCESS_MESSAGE;


        /*
         * if not successful, the message is used as an error message
         */
        if ( $successResult === false ) {
            if ( !is_null( $custom_message ) ) {
                $error_message = $custom_message;



}
} else if ( $successResult === true ) {
            if ( !is_null( $custom_message ) ) {
                $success_message = $custom_message;



}
}

        /*
         * because this method can be called from anywhere, even called by a method
         * that sets a custom message when it thought it was successful, we're going to still
         * check errors. if the errors indicate an error, we are going to use the
         * default error messaging instead
         */

        /*
         * send either the error or the successful response if no errors
         */

        if ( !$this->isHandlerSuccessful() || $successResult === false ) {
            $this->returnAjaxFormResponse(
                    false //$successResult
                    , null //$successMessage
                    , $error_message //$errorMessage
                    , $this->getValidMessages()  //$validationMessages
            );
} else{

            $this->returnAjaxFormResponse(
                    true //$successResult
                    , $success_message //$successMessage
                    , null //$errorMessage
                    , null  //$validationMessages
            );

}


    }

    /**
     * Get Formated Handler Errors As String
     *
     * Formats Form Handler Errors in a bulleted list for output
     *
     * @param none
     * @return void
     */
    public function getFormattedHandlerErrors() {


        $errors = $this->getHandlerErrors();
        if ( count( $errors ) > 1 ) {
            $li = '<li>';

} else{

            $li = '';
}

        $formatted_errors = implode( '<li>', $errors );
        if ( count( $errors ) > 1 ) {
            $final_output = '<ul><li>' . $formatted_errors . '</ul>';

}

        return $final_output;


}

    private $_validation_rules = null;

    /**
     * Add Validation Rules
     *
     * Add an array of validation rules to 
     *
     * @param string $field_name
     * @param mixed $callback Indicates the method to use to validate the field. Either the name of a built in rule in which a prefix 'validate' is added (case sensitive) or a custom callable method. e.g.: 'Email' would translate to $this->validateEmail. array($this,methodName) would translate to $this->methodName(). Built in rules will eventually be taken from a simpli forms addon module and so could also be extended.
     * @param array $params An associative array of paramaters required by the validating method
     * @param string $success_message The message to display to the user on successful validation
     * @param string $error_message The message to display to the user on unsuccessful validation
     * 
     * @return void
     */
    public function setValidationRule( $field_name, $callback, $params, $error_message ) {
        //$this->debug()->setMethodFilter( __FUNCTION__, false );
        /*
         * Add all paramaters to 
         */
        $rule = array(
            'callback' => $callback,
            'params' => $params,
            'error_message' => $error_message,
                )
        ;


        $this->_validation_rules[ $field_name ][] = $rule;
        /*
         * set the validation success message if not already set
         */
        $this->debug()->logVar( '$this->_validMessages = ', $this->_validMessages );

        if ( !isset( $this->_validMessages[ $field_name ][ 'success' ][ 0 ] ) || ($this->_validMessages[ $field_name ][ 'success' ][ 0 ] === '') ) {
            $this->validSetSuccessMessage( $field_name, $this->VALIDATION_FIELD_SUCCESS_MESSAGE );
            $this->debug()->logVar( '$this->_validMessages = ', $this->_validMessages );

}


    }

    /**
     * Get Validation Rules
     *
     * Returns the validation rules array that is contained in $this->_validation_rules
     * 
     *
     * @param string $field_name The field name of the set of rules you want to retrieve. If null, will return all rules for all fields
     * @return void
     */
    public function getValidationRules( $field_name = null ) {

        if ( is_null( $field_name ) ) {
            return $this->_validation_rules;
} elseif ( !isset( $this->_validation_rules[ $field_name ] ) ){

            return null;

} else{

            return $this->_validation_rules[ $field_name ];

}
    }

    /**
     * Validate Email
     *
     * Validate Email
     * ref: http://stackoverflow.com/q/3722831/3306354
     * @param $email
     * @return void
     */
    public function validateEmail( $email ) {

        /*
         * Return True If Optional and Trim
         * 
         * This allows you to make this field optional
         * but still able to apply this rule when something is 
         * submitted.

         */
        if ( $this->tools()->isEmptyString( $email ) ) {
            return true;
}


        $validation_result = filter_var( $email, FILTER_VALIDATE_EMAIL );


        return $validation_result;

    }

    /**
     * Validate Domain Name
     *
     * Validate Domain Name
     * ref: http://stackoverflow.com/a/10306731/3306354
     * no subdomains
     * no http
     * no slashes
     * 
     * @param string $string The domain name string to validate
     * @return void
     */
    public function validateDomainName( $domain_name ) {

        /*
         * Return True If Optional and Trim
         * 
         * This allows you to make this field optional
         * but still able to apply this rule when something is 
         * submitted.

         */
        if ( $this->tools()->isEmptyString( $domain_name ) ) {
            return true;
}


        preg_match(
                '/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$/' //$pattern
                , $domain_name  //$sourcestring
                , $matches //$matches to hold matching substrings
        );

        $this->debug()->logVar( '$matches = ', $matches );
        $this->debug()->logVar( 'empty( $matches ) = ', empty( $matches ) );

        /*
         * False if doesnt match the basic domain pattern
         */
        if ( empty( $matches ) === true ) {
            return false;
        } else{
            return true;
        }





    }

    /**
     * Validate TLD
     *
     * Checks whether a domain name contains the one of the Top Level Domains we handle
     *
     * @param string $domain_name The domain name to be validated
     * @param array $params The paramaters, including $allowed_tlds The array of allowed top level domains, including the dot. e.g.: array( '.com', '.net', '.org' )
     * 
     * @return void
     */
    public function validateTLD( $domain_name, $params ) {

        /*
         * define
         *  $allowed_tlds
         */
        extract( $this->plugin()->tools()->screenDefaults( array(
                    'allowed_tlds' => null
                        ), $params ) );




        $this->debug()->logVar( '$allowed_tlds = ', $allowed_tlds );

        $domain_parts = explode( '.', trim( $domain_name ) );
        $this->debug()->logVar( '$domain_parts = ', $domain_parts );
        /*
         * Check if $domain parts is now an array with more than 1 piece
         */
        if ( is_array( $domain_parts ) && count( $domain_parts ) > 1 ) {
            $subdomain = $domain_parts[ 0 ];
            unset( $domain_parts[ 0 ] ); //remove the subdomain

            $tld = implode( '.', $domain_parts ); //consider everything else the tld

            } else {

            $this->debug()->logVar( 'returning false - $domain_parts is either not an array or not an array with more than one part after splitting it by a dot = $domain_parts', $domain_parts );
            return false;


            }


        /*
         * False if not one of required domain endings
         */
        if ( !in_array( '.' . $tld, $allowed_tlds ) ) {
            $this->debug()->logVar( '$tld = ', $tld );
            $this->debug()->logVar( '$tlds = ', $tlds );
            $this->debug()->log( 'Returning false since tld was not found in allowed tlds ' );
            return false;
} else{
            $this->debug()->log( 'domain was one of allowed tlds' );
            return true;
}
    }

    /**
     * Valid Set Success Message
     *
     * Sets the Validated Message for a field when it passes validation
     * Wrapper around _setValidMessage
     * 
     * @param string $field_name The name of the field
     * @param string $message The message
     * 
     * @return void
     */
    public function validSetSuccessMessage( $field_name, $message ) {
        $this->debug()->logVar( 'Setting Success Message for $field_name = ', $field_name );
        $this->_setValidMessage( 'success', $field_name, $message );

    }

    /**
     * Validate Regex
     *
     * Use a regex expression to validate a form field
     *
     * 
     * ref:http://www.myregextester.com/
     * test:regex_pattern (domain):'/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$/'
     * 
     * @param none
     * @return void
     */
    public function validateRegex( $field_value, $regex_pattern ){

        preg_match(
                $regex_pattern //$pattern
                , $field_value  //$sourcestring
                , $matches //$matches to hold matching substrings
        );

        $this->debug()->logVar( '$matches = ', $matches );
        if ( empty( $matches ) === true ) {
            return false;
} else{
            return true;
}

    }

    /**
     * Validate Min Length
     *
     * Verifies that string is at least the minimum length
     *
     * @param string $string The string to validate
     * @param array $params including 'min_length' The minimum length of the string
     * 
     * @return void
     */
    public function validateMinLength( $string, $params ) {

        /*
         * define
         *  $min_length
         */
        extract( $this->plugin()->tools()->screenDefaults( array(
                    'min_length' => null
                        ), $params ) );

        $this->debug()->logVar( '$string = ', $string );
        $this->debug()->logVar( '$min_length = ', $min_length );
        if ( strlen( trim( $string ) ) < $min_length ){
            $this->debug()->log( '$string length is shorter than mix length = ' );
            return false;
    } else {
            return true;
    }
}

    /**
     * Validate Max Length
     *
     * Verifies that string is no longer than a max length.
     *
     * @param string $string The string to validate
     * @param array $params including 'max_length' The maximum length of the string
     * 
     * @return void
     */
    public function validateMaxLength( $string, $params ) {

        /*
         * define
         *  $max_length
         */
        extract( $this->plugin()->tools()->screenDefaults( array(
                    'max_length' => null
                        ), $params ) );

        if ( strlen( trim( $string ) ) > $max_length ){
            return false;
    } else {
            return true;
    }
 }

    /**
     * Validate List
     *
     * Verifies that the value is within an allowed list.
     *
     * @param string $value The string to validate
     * @param array $params including 'list' The list of values that are allowed
     * 
     * @return void
     */
    public function validateList( $string, $params ) {



        /*
         * define
         *  $list
         */
        extract( $this->plugin()->tools()->screenDefaults( array(
                    'list' => null
                        ), $params ) );
        if ( !is_array( $list ) || !in_array( $string, $list ) ) {
            return false;
} else {
            return true;
}

     }

    /**
     * Tools
     *
     * Returns a references to the tools module
     *
     * @param none
     * @return void
     */
    public function tools() {

        return $this->plugin()->getModule( 'Tools' );



   }

    /**
     * Block Spam
     *
     * Makes some basic checks, and if spam is found, asks the user to try again, then
     * either ignores the data or submits it to the generic forms database marked as spam.
     *
     * @param none
     * @return void
     */
    public function blockSpam() {

#initialize spam checks        
        $passed_automation_check = false;


        /*
         * Time Stamp Checks
         * 
         * This is not the traditional time stamp check
         * All I'm doing is using the time stamp field as a marker 
         * to tell me whether the form was submitted by a script or not
         * it tells me nothing about when the form was actually submitted.
         * The fact that its a timestamp and not a true/false field is arbitrary
         * and was selected more for obfuscation purposes then anything
         * basically, if the time stamp is valid and is greater than the current time, 
         * i know its probably valid and means that the client javacript populated
         * the field correctly, after it first checked whether it was being executed
         * by a mouse click or by a script. if it was a script, it would have not updated
         * the time stamp and the check would have failed.
         */

        /*
         * get the time stamp submitted with the form. 
         */
        $anti_spam_controls_timestamp = $this->plugin()->tools()->getRequestVar( 'sf-as-time' );


        /*
         * compare it with the current time
         * if its in the future, then we're going to assume the check is valid.
         */
        $days_in_the_future = unixtojd( $anti_spam_controls_timestamp ) - unixtojd( time() );
        $this->debug()->logVar( '$days_in_the_future = ', $days_in_the_future );
        $failed_automation_check = ( $days_in_the_future < 1 );
        $this->debug()->logVar( '$failed_automation_check = ', $failed_automation_check );

        /*
         * Honeypot check
         */
        $failed_honeypot_check = (!$this->tools()->isEmptyString( $_POST[ 'sf-as-url' ], false ) || (!$this->tools()->isEmptyString( $_POST[ 'sf-as-comment' ], false ) ));

        $this->debug()->logVar( '$failed_honeypot_check = ', $failed_honeypot_check );

        /*
         * BlogSpam.Net Check
         * 
         */
        $failed_blog_spam_dot_net_check = $this->isSpamPerBlogSpamDotNet();

        $this->debug()->logVar( '$failed_blog_spam_dot_net_check = ', $failed_blog_spam_dot_net_check );


        $this->debug()->logVar( 'getStatsFromBlogSpamDotNet() for ' . get_bloginfo( 'url' ) . '  = ', $this->getStatsFromBlogSpamDotNet() );

        /*
         * LinkSleeve Check  ** not used

          $failed_link_sleeve_check = $this->isSpamPerLinkSleeve();

          $this->debug()->logVar('$failed_link_sleeve_check = ', $failed_link_sleeve_check);
         * 
         */
        $its_spam = (
                $failed_automation_check || $failed_honeypot_check || $failed_blog_spam_dot_net_check
                );

        $this->debug()->logVar( '$its_spam = ', $its_spam );
        if ( $its_spam ) {



            /*
             * submit the suspected spam into our contact form database for safekeeping where 
             * we can review it later.
             */
            $this->_SubmitForm( 'sspam' );

            $this->setFormHandlerError( 'Failed automation checks' );
            $this->sendFormResponse( false, 'We were unable to process your form submission. Its possible your form filler is not behaving correctly - please  try again, but this time  manually enter the form fields. If you need assistance, please contact support.' );

} else{

            $this->debug()->log( 'Not spam, continue to validating form inputs' );

}







    }

    /**
     * Get Stats from BlogSpam.Net
     *
     * Retrieves the number of results for spam and no spam were detected on  http://blogspam.net/
     *
     * 
     * @param none
     * @return array $result containing 'ok' and 'spam' elements whose values are their respective counts
     */
    public function getStatsFromBlogSpamDotNet()
{
        $result = array();

        $request_url = "http://test.blogspam.net:9999/stats";
        //
        // Send the JSON result.
        //
 $this->debug()->log( 'Getting Spam Stats from blogspam.net' );

        /*
         * the data should just be the site url, which is how
         * it identifies what data we want
         */
        $stats_data = array( 'site' => get_bloginfo( 'url' ) );
        /*
         * make the request
         */
        $stats = wp_remote_post(
                $request_url, array( 'body' => json_encode( $stats_data ) )
        );
        /*
         * check for errors
         */
        if ( !is_wp_error( $stats ) ) {



            $obj = json_decode( $stats[ 'body' ], true );
            if ( $obj && array_key_exists( "spam", $obj ) ) {

                $result[ 'spam' ] = $obj[ 'spam' ];
      } else{
                $result[ 'spam' ] = 0;
      }
            if ( $obj && array_key_exists( "ok", $obj ) ) {

                $result[ 'ok' ] = $obj[ 'ok' ];
      } else{
                $result[ 'ok' ] = 0;
      }

  } else {
            $this->debug()->log( 'Couldn\'t connect to BlogSpam.net server ' . $request_url . ' to retrieve stats ' );
            $result = array();
  }


        return $result;
}

    /**
     * Block Spam Check
     *
     * Checks Post against an online service created by Steve Kemp  http://blogspam.net/
     *
     * Fix False Positives: You can retrain the API if it tells you something is Spam when
     * its not: http://blogspam.net/api/2.0/classify.html
     * This is another good reason why we should keep the spam submissions until a human reviewer
     * looks at them
     * 
     * @param string $pspam_raw Possible Spam
     * @return void
     */
    public function isSpamPerBlogSpamDotNet( $pspam_raw = null )
{

        if ( !$this->BLOG_SPAM_NET_CHECK ) {
            $this->debug()->logVar( 'BLOG_SPAM_NET_CHECK has been turned off so setting it to false and skipping the check = ', $this->BLOG_SPAM_NET_CHECK );
            return false;
}


        /*
         * If no content was provided to check,
         * we use the entire $_POST variable extracted to a string
         */
        if ( is_null( $pspam_raw ) ) {
            $pspam_raw = var_export( $_POST, true );
}

        /*
         * Return if Empty content
         */
        if ( $this->tools()->isEmptyString( $pspam_raw ) ) {
            return false;
}

        $this->debug()->logVar( '$pspam_raw = ', $pspam_raw );
        $this->debug()->logVar( 'is_string($pspam_raw) = ', is_string( $pspam_raw ) );
        $this->debug()->logVar( 'is_array($pspam_raw) = ', is_array( $pspam_raw ) );


        $author = null;
        $submitter_email = null;


        $submitter_ip = $_SERVER[ 'REMOTE_ADDR' ];

        $bs_server_name = "http://test.blogspam.net:9999";

        $bs_additional_options = '';


        //
        // Try to ensure the possible spam is valid UTF-8, which is mandatory
        // for the JSON extension module.
        //

  $pspam_utf8 = iconv( 'UTF-8', 'UTF-8//IGNORE', $pspam_raw );
        $this->debug()->logVar( '$pspam_utf8 conversion = ', $pspam_utf8 );
        $pspam = ($pspam_utf8 !== false) ? $pspam_utf8 : $pspam_raw;
        //  $this->debug()->stop( true );
        //
        // Make the structure we'll send.
        //
  // This corresponds to:
        //
  //  http://blogspam.net/api/2.0/testComment.html
        //
  $struct = array(
            'ip' => $submitter_ip, //$_SERVER['REMOTE_ADDR'], The IP address the comment was submitted from.
            'name' => $author, //The name the submitter supplied.
            'email' => $submitter_email, //The email address the submitter supplied.
            'comment' => $pspam, //The body of the submitted comment.
            'site' => get_bloginfo( 'url' ), //A link to your site - this parameter is needed for the getStats() function to be useful.
            'options' => $bs_additional_options, //http://blogspam.net/api/2.0/testComment.html#options Set the value of this parameter to a comma-separated string
            'version' => null //The version of the plugin that you're using, if any.
        );

        $this->debug()->logVar( '$struct = ', $struct );

        //
        // Send the JSON result.
        //
 $this->debug()->log( 'Checking BlogSpam.Net to see if the submission is spam' );
        $result = wp_remote_post( $bs_server_name, array( 'body' => json_encode( $struct ) ) );

        /*
         * The result will be returned as a JSON-encoded hash, that hash will contain the following keys:
         * Ref:http://blogspam.net/api/2.0/testComment.html#options
         * The result will be returned as a JSON-encoded hash, that hash will contain the following keys:
          Key	Meaning
          result 	The result of the test - one of "ERROR", "OK" or "SPAM".
          reason 	This field might be present in any response, but it is particularly useful if the tested result result was SPAM or ERROR, where it can be expected to describe (briefly) why the comment was rejected.
          blocke This is a field that describes the name of the plugin, if any, which rejected a comment. Plugins can be disabled selectively when you're submitting comments so this information is potentially useful.
          version The version of the API.


         */


        if ( !is_wp_error( $result ) ) {

            $obj = json_decode( $result[ 'body' ], true );

            if ( $obj[ 'result' ] == "SPAM" )
      {
                $this->debug()->logVar( 'Content is spam!', $pspam );

                return true;
       } else if ( $obj[ 'result' ] == "ERROR" ){

                $this->debug()->log( 'BlogSpam.Net encountered an error and couldnt determine whether this is spam' );
                $this->debug()->logVar( '$obj = ', $obj );
                return false; //return false since its better not to block
       } else if ( $obj[ 'result' ] == "OK" ){
                $this->debug()->log( 'BlogSpam.Net doesn\'t think this content is spam' );
                return false;

       }
   } else{
            $this->debug()->log( 'Couldn\'t connect to BlogSpam.net server ' . $bs_server_name );




            $this->debug()->log( 'Due to problems connecting, it was not possible to determine if this content is spam, so returning spam=false to avoid blocking valid content' );

            $this->debug()->logError( $result->get_error_message() );
            return false;
   }
        $this->debug()->log( 'BlogSpam.Net doesn\'t think this content is spam' );
        return false;
}

    /**
     * Is Spam Per Link Sleeve
     *
     * Link Sleeve Doesn't appear to be in service anymore. It contiually gives 'access denied' using the sample code they provide. I tried to modify the code to use wordpress ( see below ) but couldn't finish testing because that also gave me access denied.
     * the XML client appears to provide some response, so it might be worth trying to get it working. There also doesn't seem to be any support.
     * 
     * 
     *  Link Sleeve Spam Check
     * http://www.linksleeve.org/#who 
     *
     * @param string $suspected_spam
     * @return void
     */
    public function isSpamPerLinkSleeve( $pspam_raw = null )
{


        $server_address = "http://www.linksleeve.org/slv.php";

        /*
         * If no content was provided to check,
         * we use the entire $_POST variable extracted to a string
         */
        if ( is_null( $pspam_raw ) ) {
            $pspam_raw = var_export( $_POST, true );
        }
        $this->debug()->logVar( 'Checking Link Sleeve', $pspam_raw );


        /*
         * Return if Empty content
         */
        if ( $this->tools()->isEmptyString( $pspam_raw ) ) {
            $this->debug()->logVar( 'Empty content, so returning from LinkSleeve check = ', $pspam_raw );
            return false;
}


        $data = "content=$pspam_raw";


        if ( false ) {


            $result = wp_remote_post( $server_address, array(
                'body' => $data,
                'headers' =>
                array(
                    'Host' => 'www.linksleeve.org',
                    'content-type' => 'application/x-www-form- urlencoded',
                    'content-length' => strlen( $data ),
                    'user-agent' => "Mozilla/4.0 (compatible: MSIE 7.0; Windows NT 6.0)"
                )
                    )
            );

            $this->debug()->logVar( '$result = ', $result );



            $this->debug()->logVar( '$data = ', $data );

}

        $buf = "";

        $fp = fsockopen( "www.linksleeve.org", 80, $errno, $errstr, 30 );
        $header = "POST /pslv.php HTTP/1.0\r\n";
        $header .= "Host: www.linksleeve.org\r\n";
        $header .= "Content-type: application/x-www-form- urlencoded\r\n";
        $header .= "Content-length: " . strlen( $data ) . "\r\n";
        $header .= "User-agent: Mozilla/4.0 (compatible: MSIE 7.0; Windows NT 6.0)\r\n";
        $header .= "Connection: close\r\n\r\n";
        $header .= $data;

        fputs( $fp, $header, strlen( $header ) );

        while ( !feof( $fp ) ) {
            $buf .= fgets( $fp, 128 );
            }

        fclose( $fp );


        $this->debug()->logVar( '$buf = ', $buf );

        if ( !stristr( $buf, "-slv-1-/slv-" ) ) { return 'spam'; } else { return 'ham'; }
                    }

    /**
     * validateWidgetCodeIsPurchased
     *
     * Checks whether a widget code is a widget code in the nstock_widgeet_codes table and is not expired
     *
     * @param string $widgetCode The WidgetCode
     * @return void
     */
    public function validateWidgetCode( $widgetCode ) {

//        
//           if ( !$this->widgetIsSelected() ) {
//               /*
//                * since no widget is selected, we don't want 
//                * any success message since the field will be empty
//                */
//               
//               
//               
//               $this->validSetSuccessMessage('widget_code','');
//               return true; 
//               
//           }


        global $wpdb;

        $query = "select `id` from `nstock_widget_codes` where `widget_code`='" . $widgetCode . "' and now()<=time_expires";
        $this->debug()->logVar( '$query = ', $query );
        $row = $wpdb->get_row( $query, ARRAY_A );
        $this->debug()->logVar( '$row = ', $row );
        if ( is_null( $row ) ) {
            return(false);

} else{
            return true;
}

    }

    /**
     * Validate a Url
     *
     * Performs various checks to verify that a url is valid. 
     *
     * @param string $url_in The url to be validated
     * @param boolean $is_external True to perform additional check to verify it includes an external domain ( example.com) . This does not check to see if the url ha a different domain than the current host. It means that urls like http://myurl/ will return false. http://example.com will pass.
     * @param boolean $is_live True to perform additional check to see if the url is online and reachable
     * 
     * @return boolean True if domain passes all checks, false if even one fails.
     */
    public function validateUrl( $_url, $is_external = true, $verify_live = true ) {
        $this->debug()->setMethodFilter( __FUNCTION__, false );
        $result = true;
        $url_tested = null;

        #preprocessing
        $url = trim( $_url );


        /*
         * if no scheme is provided , add http:// as default
         */
        $url_parts = parse_url( $url );

        $this->debug()->logVar( '$url_parts = ', $url_parts );
        if ( isset( $url_parts[ 'scheme' ] ) ) {
            $url_tested = $url;
} else{
            $url_tested = 'http://' . $url;
            $url_parts = parse_url( $url_tested );
}
        $this->debug()->logVar( '$url_parts = ', $url_parts );

        /*
         * Check for a host ( required for an external url) 
         */
        if ( $is_external ) {


            if ( isset( $url_parts[ 'host' ] ) ) {


                /*
                 * if there is a host, verify that there is
                 * a top level domain by doing a simple check and ensuring there is a dot somewhere
                 */

                if ( stripos( $url_parts[ 'host' ], '.' ) === false ) {
                    $this->debug()->log( 'Returning false, no external TLD found' );
                    $result = false;
}
} else{
                $this->debug()->log( 'Returning false, no host found' );
                $result = false;
}
}



        /*
         * Now that we've verified top level domain, check to see if the domain is valid
         * using php's validation function
         */

        if ( $result )
        {
            $result = (filter_var( $url_tested, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED | FILTER_FLAG_HOST_REQUIRED ) !== false) ? true : false;
        }



        $this->debug()->log( '$result = ' . ($result) ? 'true' : 'false' . ' url = ' . $url_tested  );

        /*
         * isLive Check
         * Actually try to reach the url using wp_remote_get and wp_remote_retrieve_response_code
         */
        if ( $result ) {
            if ( $verify_live ) {
                $success_http_codes = array( '200', '301', '302' );
                $live_http_response = wp_remote_get( $url_tested );

                $this->debug()->logVar( '$live_http_response = ', $live_http_response );

                $http_response_code = wp_remote_retrieve_response_code( $live_http_response );
                $this->debug()->logVar( '$http_response_code = ', $http_response_code );

                if ( !in_array( $http_response_code, $success_http_codes ) ) {
                    $result = false;
}




}
}

        return ($result);


    }

    /**
     * Get Nstock Domains Data
     *
     * Takes the form data submitted by the user and converts it to the fields needed by the nstock_domains table for insertion.
     *
     * @param none
     * @return array $data
     */
    private function _getNstockDomainsData() {
        $data = array();
        $data[ 'email' ] = $this->plugin()->tools()->getRequestVar( 'email_address' );
        $data[ 'marketplace' ] = $this->plugin()->tools()->getRequestVar( 'marketplace' );

        /*
         * Get the domain_name from the form that was just submitted
         */
        $domain_parts = $this->plugin()->tools()->getRequestVar( 'domain_name' );

        $domain_parts = explode( '.', trim( $domain_parts ) );

        /*
         * Check if $domain parts is now an array with more than 1 piece
         */
        if ( is_array( $domain_parts ) && count( $domain_parts ) > 1 ) {
            $data[ 'subdomain' ] = $domain_parts[ 0 ];
            unset( $domain_parts[ 0 ] ); //remove the subdomain

            $data[ 'tld' ] = implode( '.', $domain_parts ); //consider everything else the tld

    }
        return ($data);
    }

    
        /**
     * Show Beta Signup Form
     *
     * Shows the Beta Signup Form
     *
     * @param none
     * @return void
     */
    public function showBetaSignupForm() {
        
?><div markdown="0"><?php
                
        $f = $this->plugin()->getAddon( 'Simpli_Forms' )->getModule( 'Form' );
        $f->formStart( array(
            'theme' => 'Bootstrap',
            'ajax' => true,
            'filter' => 'Bootstrap',
            'style' => '',
            'container' => 'false', //since we're placing the container before the form, we turn it off.
         //   'class' => "col-md-10 col-md-offset-1",
            'label_size' => '4',
            'size' => '4',
            'name' => 'beta_signup',
            'layout' => 'nomstock.com'
                )
        );
        ?><!-- response start to replace form -->
        <div style="margin-top:20px;display:none;visibility:hidden" class="row">

            <div style="margin-top:5px;" class="col-md-4">
                <h2>Add Your Domain Name to the Ticker&nbsp;&nbsp;&nbsp;<small><a href="/how/">Learn More</a></small></h2>

            </div> 
        </div>



        <div style="" class="row">

            <div style="" class="col-md-10 simpli_forms_response ">  <!-- form response will populate here. place around the form to replace it -->             </div>
        </div>

        <div style="" class="row">
            <label style class="col-md-offset-1 col-md-1" for="email">Email</label>
   
        </div>
        <div style="" class="row">

            <div class="col-md-offset-1  col-md-4">
                <?php
                $f->el( array(
                    'el' => 'text',
                    'class' => '',
                    'name' => 'email',
                    'style' => "",
                    'placeholder' => 'MyEmail@example.com',
                    'value' => '',
                    'label' => 'Email',
                    'hint' => 'The domain name you are submitting for listing',
                    'heading' => '',
                    'label_size' => 0,
                    'size' => '4',
                    'layout' => 'bare'
                        )
                );
                ?>
            </div>
 <div class=" col-md-3">
                <?php
                $f->el( array(
                    'el' => 'button',
                    'value' => 'Send me a Beta Invite!', //'Add to the Nomstock Ticker',
                    //  'spinner'=>$nomstock_com->getUrl().'/images/wpspin_light.gif',
                    'spinner' => $this->plugin()->getUrl() . '/images/spinner.gif',
                    'action' => 'beta_signup',
                    'class' => 'btn-success btn-block',
                    'style' => 'margin-top:3px;margin-bottom:6px;',
                    'size' => '',
                    'layout' => 'bare'
                        )
                );
                ?>  <!-- Button End -->  

    </div>
<!-- Button Start --> 
        </div><!-- End of row -->
        <div style="" class="row">
            <div class="col-md-offset-1 col-md-4">
                <div data-sf-valid="email"></div>
            </div>


        </div>

 <div style="" class="row">
<div class="col-md-offset-1 col-md-8">
    <small><em>Beta Participants will also receive Nomstock's Weekly Newsletter with Beta updates, top 10 lists, and latest Domain news (you may cancel the newsletter anytime and still remain in the beta)</em></small>
</div>
     
     
     </div>






        <?php
        $f->formEnd();
?></div><!-- end markdown syntax --><?php
    }


    
    /**
     * Show Add Domain Form
     *
     * Shows the User Add Domain Form
     *
     * @param none
     * @return void
     */
    public function showAddDomainForm() {

        $f = $this->plugin()->getAddon( 'Simpli_Forms' )->getModule( 'Form' );
        $f->formStart( array(
            'theme' => 'Bootstrap',
            'ajax' => true,
            'filter' => 'Bootstrap',
            'style' => '',
            'container' => 'false', //since we're placing the container before the form, we turn it off.
            'class' => "col-md-10 col-md-offset-1",
            'label_size' => '4',
            'size' => '4',
            'name' => 'list_domain',
            'layout' => 'nomstock.com'
                )
        );
        ?><!-- response start to replace form -->
        <div style="margin-top:20px;display:none;visibility:hidden" class="row">

            <div style="margin-top:5px;" class="col-md-4">
                <h2>Add Your Domain Name to the Ticker&nbsp;&nbsp;&nbsp;<small><a href="/how/">Learn More</a></small></h2>

            </div> 
        </div>



        <div style="" class="row">

            <div style="" class="col-md-10 simpli_forms_response ">  <!-- form response will populate here. place around the form to replace it -->             </div>
        </div>
        <div style="" class="row">
            <?php
            $f->el( array(
                'el' => 'text',
                'name' => 'domain_name',
                'style' => "color:#969696;font: 400 42px/0.5 'crete_roundregular';border:none;outline:0;height:128px;line-height:128px;",
                'placeholder' => 'Enter your domain name here', //'AddYourDomainNameHere.Com',
                'value' => '',
                'label' => '',
                'label_size' => 0,
                'size' => '12',
                'hint' => 'The domain name you are submitting for listing',
                'heading' => '',
                'template' => 'text-domain'
                    )
            );
            ?>
            <div   data-sf-valid="domain_name"></div>
            <!-- Add the Widgetize Your Listing Code Here -->


        </div>
        <div style="" class="row">
            <label style class="col-md-offset-1 col-md-1" for="email">Email</label>
            <label style class="col-md-offset-3 col-md-1" for="email">Marketplace</label>
        </div>
        <div style="" class="row">

            <div class="col-md-offset-1  col-md-4">
                <?php
                $f->el( array(
                    'el' => 'text',
                    'class' => '',
                    'name' => 'email',
                    'style' => "",
                    'placeholder' => 'MyEmail@example.com',
                    'value' => '',
                    'label' => 'Email',
                    'hint' => 'The domain name you are submitting for listing',
                    'heading' => '',
                    'label_size' => 0,
                    'size' => '4',
                    'layout' => 'bare'
                        )
                );
                ?>
            </div>
            <div class="col-md-offset-0 col-md-4">
                <?php
                $f->el( array(
                    'el' => 'dropdown',
                    'name' => 'marketplace',
                    'class' => '',
                    'options' => array( 'select' => 'Take Pricing from ...', 'sedo' => 'Sedo', 'afternic' => 'Afternic', 'godaddy' => 'GoDaddy' ),
                    'value' => 'select',
                    'label' => 'Use Information From*',
                    'hint' => '',
                    'heading' => '',
                    'layout' => 'bare',
                    'size' => '8'
                        )
                );
                ?><!-- Button Start --> 

            </div>

        </div><!-- End of row -->
        <div style="" class="row">
            <div class="col-md-offset-1 col-md-4">
                <div data-sf-valid="email"></div>
            </div>
            <div class="col-md-offset-0 col-md-4">
                <div data-sf-valid="marketplace"></div>
            </div>

        </div>
        <div style="" class="row">

            <div class="col-md-offset-1 col-md-8">
                <?php
                $f->el( array(
                    'el' => 'checkbox',
                    'class' => '',
                    'name' => 'newsletter_optin',
                    'style' => "",
                    'options' => array( 'signmeup' => 'Invite me to the <a href="/membership/">Nomstock Beta</a> and subscribe to the Nomstock Picks Newsletter' ),
                    'value' => '',
                    'label' => '',
                    'hint' => '',
                    'heading' => '',
                    'layout' => 'bare',
                    'size' => '2'
                        )
                );
                ?>

            </div>

        </div>





        <div class="row"> 

            <div class="col-md-4 col-md-offset-5">
                <?php
                $f->el( array(
                    'el' => 'button',
                    'value' => 'List my domain name for free!', //'Add to the Nomstock Ticker',
                    //  'spinner'=>$nomstock_com->getUrl().'/images/wpspin_light.gif',
                    'spinner' => $this->plugin()->getUrl() . '/images/spinner.gif',
                    'action' => 'submit_domain',
                    'class' => 'btn-info btn-block',
                    'style' => 'margin-top:5px;margin-bottom:5px;',
                    'size' => '',
                    'layout' => 'bare'
                        )
                );
                ?>  <!-- Button End -->  

            </div>
        </div>

        <div class="row"> 
         <!-- a class="label label-warning" href="#">----- Add Widgets -----</a> <br><small><a href="#" class="label label-default">----- WTF are Widgets? -----</a> </small -->

            <div class="col-md-offset-0">

                <!-- Add Widget Code Here -->




                <div ></div>    
            </div>









        </div>    
        </td>




        </tr></tbody></table>



        <?php
        $f->formEnd();

    }

}
